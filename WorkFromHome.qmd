---
title: "Work From Home: Who Can and Who Does?"
subtitle: "Using ACS & O*NET Data"
output:
  html_document:
    toc: yes
    toc_float: yes
---

# Getting Data

```{r setup, warning=FALSE, message=FALSE}

library(scales)
library(reldist)
library(pollster)
library(labelled)
library(weights)
library(tigris)
library(ipumsr)
library(tidyverse)
```

# ACS data Notes

-   INCWAGE is topcoded only at the 99.5th percentile within a state. So almost ALL obs should be close their actual income.

    -   Incwage coding procedure [link](https://usa.ipums.org/usa-action/variables/INCWAGE#editing_procedure_section)

-   INCTOT includes self-employment income, INCWAGE does not.

    -   Some industries (e.g. farming) may not be included in sample if using INCWAGE. Does that matter?
    -   Bottom coded at -\$19,988, is not top coded

-   INCEARN includes salaries, wages, and business/farm income. Use this one I think

    -   INCEARN is made from summing INCWAGE, INCBUS, and INCFARM

    -   INCEARN is not itself topcoded, but some of the other variables may be, especially for early years of data collection (which don't apply to us)

## 2021 1-Year Data

```{r}
ddi <- read_ipums_ddi("usa_00011.xml")  # downloaded April 10 2023

#ddi <- read_ipums_ddi("usa_00008.xml")
# 747,787 observations before any filtering


data <- read_ipums_micro(ddi) 
# 126,623 observations

```

## 2021 5-Year ACS (2016-2021)

```{r warning = FALSE, message=FALSE, results='hide'}

library(tigris)
library(ipumsr)
library(tidyverse)

# PUMA shapefiles
pumasIL <- pumas("IL", cb=T, year=2019)
#county shapefiles
countyIL <- counties("IL", cb=T, year=2019)

pumasdf <- fortify(pumasIL, region = 'PUMACE10')
```

```{r warning = FALSE, message=FALSE}




# NOTE: To load data, you must download both the extract's data and the DDI
# and also set the working directory to the folder with these files (or change the path below).


#ipumsr key = 59cba10d8a5da536fc06b59daf9dae6406ec4a929d7d7341739c9cf9
#set_ipums_api_key("59cba10d8a5da536fc06b59daf9dae6406ec4a929d7d7341739c9cf9")

# # create a new extract object
# extract_definition <- define_extract_usa(
#     "This is an example extract to submit via API.",
#     c("us2018a","us2019a"),
#     c("AGE", "SEX", "RACE", "STATEFIP")
# )
# 
# # submit the extract to IPUMS USA for processing
# submitted_extract <- submit_extract(extract_definition)
# 
# # access the extract number, stored in the return value of submit_extract
# submitted_extract$number


ddi <- read_ipums_ddi("usa_00010.xml") # 2021 5-Year ACS IPUMS download
data <- read_ipums_micro(ddi)
# data had 621164 obs

# data <- data %>% filter(INCTOT != 9999999 & INCTOT>1,
#                         INCWAGE < 999998 & INCWAGE>0)
# data drops to 455,581 obs with INCTOT filters
# 313249 with INCWAGE filters

pums_weighted <- data %>% 
  group_by(PUMA, COUNTYFIP) %>% 
  summarize(weighted = sum(PERWT)) %>% 
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))

pums_unweight <- data %>% 
  group_by(PUMA, COUNTYFIP) %>% 
  summarize(unweight = n()) %>% #unweighted
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))

plotweighted <- pumasdf %>% left_join(pums_weighted, by = c("PUMACE10" = "PUMA"))
plotunweight <- pumasdf %>% left_join(pums_unweight, by = c("PUMACE10" = "PUMA"))
plot(plotweighted["weighted"])
plot(plotunweight["unweight"])

FIPweighted <- countyIL %>% left_join(pums_weighted, by = c("COUNTYFP" = "countyFIP"))
FIPunweight <- countyIL %>% left_join(pums_unweight, by = c("COUNTYFP" = "countyFIP"))
plot(FIPweighted["weighted"])
plot(FIPunweight["unweight"])


plotDF <- pumasdf %>% left_join(pums_weighted, by = c("PUMACE10" = "PUMA"))

plot(plotDF["weighted"])

plot(countyIL["COUNTYFP"])


```

#### PUMAS vs COMMZONE vs COUNTIES

[Link from Francis on COMZONE variable](https://eig.org/the-uneven-geography-of-remote-work/) (Commuter Zones)

[Interactive ESRI Map of all PUMA outlines](https://univofillinois.maps.arcgis.com/apps/mapviewer/index.html?layers=71eb4ef236ca42c4b577a0a105e790e2)

[Article on calculating mean income for groups of geographies with ACS data](https://atcoordinates.info/2019/05/13/calculating-mean-income-for-groups-of-geographies-with-census-acs-data/)

```{r warning=FALSE, message=FALSE}


```

### Occupation codes

`OCC2010` is a harmonized occupation coding scheme as broad groups. These are 4 characters long and are the first 4 characters of the longer ONET & SOC codes.

`OCCSOC` is 6 digits long. It is the first 6 digits of 8-digit ONET code.

-   Please note that in some cases the SOC occupation codes are aggregated if they do not have an exact match to a Census occupation code or to preserve confidentiality in cases where the category contained fewer than 10,000 people nationwide.

`LABFORCE` for if in labor force. 1 = not in labor force, 2 = in labor force, 0 is NA

`EMPSTAT` and `EMPSTATD` for employment status (simple and the detailed version). 1=employed, 2=unemployed, 3=not in labor force for empstat, 0 is NA

`CLASSWKRD` might be useful. Contains info on self-employed, wages, salary, etc for class of worker.

::: callout-note
For persons who are unemployed, the data refer to the most recent job if it was within the last 5 years.
:::

### Descriptive Stats

IPUMS [link for Survey package](https://usa.ipums.org/usa/repwt.shtml)

IPUMS OCC codes over time [link](https://usa.ipums.org/usa/volii/occsoc18.shtml)

```{r worker-descstats}

table(data$EMPSTAT) # unweighted

data %>% 
  group_by(as_factor(EMPSTAT)) %>%
  dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = n/sum(n))

data %>% 
  filter(MULTYEAR > 2019) %>% # post-COVID
  group_by(as_factor(EMPSTAT)) %>%
  dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = n/sum(n))

data %>% 
  filter(MULTYEAR <= 2019) %>% # pre-COVID
  group_by(as_factor(EMPSTAT)) %>%
  dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = n/sum(n))

table(data$LABFORCE) # unweighted
data %>% group_by(as_factor(LABFORCE)) %>%
  dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = n/sum(n))

table(data$CLASSWKR)# unweighted
data %>% 
  group_by(as_factor(CLASSWKR)) %>%
  dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = n/sum(n))


data %>% group_by(MULTYEAR) %>%
  count()

data %>% 
  group_by(MULTYEAR,TRANWORK) %>%
  dplyr::summarize(n = sum(PERWT)) %>%
  pivot_wider(names_from = MULTYEAR, values_from = n)

#install.packages("pollster")

topline(df = data, variable = LABFORCE, weight = PERWT )
crosstab(data, x=MULTYEAR, y = LABFORCE, weight = PERWT)
topline(data, EMPSTAT, PERWT)
crosstab(data, x=MULTYEAR, y = EMPSTAT, weight = PERWT)

```

~~Unweighted - EMPSTAT: 297,000 observations are employed, 17,000 unemployed observations, and 198,000 observations are not in the workforce (109,000 NAs)~~

~~LABFORCE: 315,000 are in labor force, 197,000 are not. (109,000 NAs)~~

~~CLASSWKR: Of these, 338,000 work for wages and 34,000 people are self-employed. (250,000 NA)~~

[Weighted]{.underline} -

LABFORCE: 6,692,660 people (52%) are in the labor force. 3,584,734 (28%) of people are not in the labor force. 2,544,419 (20%) of observations missing values.

EMPSTAT: 6,279,200 people are employed (49%), 413,460 people are unemployed(3.2%), and 3,584,734 are not in the labor force (30%). There are 2,544,419 missing values; Same as LABFORCE.

-   employed and unemployed equal number of people in labor force - that's good

CLASSWKR: 6,997,620 people (55%) work for wages. 661,164 (5%) are self employed.

**Pre and Post COVID values**: when aggregating values before and after 2019, there is a slight difference in the percent of the population that is unemployed (which is expected since there was a pandemic)

So far so good. Makes sense.

Location of primary workplace: 5,936,960 people worked in Illinois

```{r inctot-calcs, warning=FALSE, message=FALSE}
# State worked in:
#0=NA, 17=Illinois



# ipums_var_desc(data, PWSTATE2)

data <- data %>% 
  mutate(PWSTATE2_clean = as_factor(lbl_na_if(PWSTATE2, ~.val %in% c(0))))

data %>% 
  group_by(PWSTATE2) %>%
  dplyr::summarize(n=sum(PERWT)) %>% #number of people that match that observation
  mutate(pct = n/sum(n)) %>% 
  arrange(desc(pct))

# postCOVID primary location of workplace
data %>% 
  filter(MULTYEAR > 2019) %>%
  group_by(as_factor(PWSTATE2_clean)) %>%
 dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = round(n/sum(n), digits = 2)) %>% 
  arrange(desc(pct))
 
# preCOVID primary location of workplace 
data %>% 
  filter (MULTYEAR<=2019) %>%
  group_by(as_factor(PWSTATE2)) %>%
  dplyr::summarize(n=sum(PERWT)) %>% 
  mutate(pct = round(n/sum(n), digits = 2 ) ) %>% 
  arrange(desc(pct))

summary(as.numeric(data$INCTOT))
summary(as.numeric(data$INCWAGE))

attributes(data$INCTOT)
attributes(data$INCWAGE)

#data %>% filter(INCTOT != 9999999  & OCCSOC >0 & INCTOT>1)
## 357,376 when adding OCCSOC filter greater than zero


# 999999 is missing values and want positive income values
data <- data %>% 
  filter(INCTOT != 9999999 & INCTOT>0)  %>%
# 455,581 obs remaining
  filter(INCWAGE != 999998 & INCWAGE != 999999 & INCWAGE>0)
# ~313000 obs remaining after both steps

summary(as.numeric(data$INCTOT))
summary(as.numeric(data$INCWAGE))

```

Quartiles for both INCTOT and INCWAGE. Boxplots to visualize data distribution are below.

```{r inctot-calcs2}

data %>% ggplot(aes(x=INCTOT)) + geom_boxplot() 
# outliers mostly after $400,000

data %>% ggplot(aes(x=INCWAGE)) + geom_boxplot() 

data <- data %>% 
 # filter(INCTOT <450000) %>%
  mutate(inctot_decile = ntile(INCTOT, 10),
         incwage_decile = ntile(INCWAGE, 10)) #

table(data$inctot_decile) #equal number of people, yay
 
# histogram of total income
hist(data$INCTOT, bins = 30) # unweighted


data %>% 
  ggplot(aes(x=INCTOT)) + 
  geom_histogram(bins =  30) + 
  scale_x_continuous(labels = label_dollar())


topline(data, INCTOT, weight = PERWT)

topline(data, inctot_decile, weight = PERWT)


wtd.hist(data$INCTOT, weight = data$PERWT, breaks = 10)
         #breaks = c(0.1, 0.2, 0.3, .4, .5, .6,.7,.8,.9,1))

#sum(data$PERWT)


data_decile <- data %>% 
#  filter(INCTOT < 400000) %>%
#  dplyr::group_by(ntile(INCTOT, 10) ) %>%
  mutate(decile = ntile(INCTOT, 10) ) 

table(data_decile$decile) #yay equal numbers of people in each decile group


```

```{r incearn-descripstats, warning=FALSE, message=FALSE}

summary(as.numeric(data$INCTOT))
summary(as.numeric(data$INCEARN))

attributes(data$INCTOT)
attributes(data$INCEARN)

data <- data %>% 
 # filter(INCWAGE <450000) %>%
  mutate(incearn_decile = ntile(INCEARN, 10)) #adds a variable to indicate which decile an observation falls within

breaksummary <- data %>% 
  group_by(incearn_decile) %>%
  summarize(decile_min = min(INCEARN),
            decile_max = max(INCEARN)
            ) 
breaksummary

table(data$incearn_decile) #equal number of people, yay
 
# histogram of wages and salary income
 # unweighted
data %>% ggplot(aes(x=INCEARN)) + 
  stat_bin(bins=30)+ 
  scale_x_continuous(labels = label_dollar())


topline(data, INCEARN, weight = PERWT)

topline(data, incearn_decile, weight = PERWT)


#unweighted
wtd.hist(as.numeric(data$INCEARN), breaks = 30)

#weighted
wtd.hist(as.numeric(data$INCEARN), breaks = 30,
         weight = data$PERWT)
```

#### Observations without OCC codes

Look at the subset of data called `noOCCSOC`. Why do they not have OCC codes? Check work.

```{r}

# noOCCSOC<- data %>% 
#   filter(OCCSOC == 0) #98205 with occsoc=0
# 
# table(noOCCSOC$EMPSTAT)
# 
# before filtering out the incwage and inctot variables for 0's and negatives, 
# #98% of the people without Occupation codes are not in the labor force. Makes sense
# all observations have occsoc codes after filtering for INCWAGE and INCTOT and previous steps

data2 <- data %>% filter(OCCSOC != 0) 

topline(df = data2, variable = EMPSTAT, weight = PERWT )

crosstab(data2, x=MULTYEAR, y = LABFORCE, weight = PERWT)


sum(data2$PERWT) # 6.5 million people


```

Look at decile breaks for INCWAGE:

*These are different than Xiaoyans*? Double check??

```{r eval=FALSE}
income_deciles <- data2 %>% 
  group_by(ntile(INCWAGE, 10)) %>%
  dplyr::summarize(mean_inc = mean(INCWAGE)) 

income_deciles

data2 %>% 
  group_by(ntile(INCWAGE,10)) %>%
  dplyr::summarize(mean_inc = mean(as.numeric(INCWAGE)) )%>%
  ungroup() %>%
  mutate(INCWAGE_decile='ntile(INCWAGE,10)') %>%
  ggplot(aes(x = ntile(INCWAGE_decile,10), y=mean_inc)) + 
  geom_bar(stat = "identity") +
  labs(x="Income decile", y="Mean Income", title = "Average Income for each Income Decile.") +
  scale_x_continuous(breaks = 1:10)

```

teleworkable2010.csv has the 6digit OCCSOC codes. I also added the 5 digit broader version that ends with a 0 in the 6th digit to increase the chances of matching.

Updated teleworkable2010.csv again with 4digitXX codes and 5digitXcodes to increase matching.

```{r}
#telework csv uses data from Dingle and Nieman
# https://github.com/jdingel/DingelNeiman-workathome/blob/master/occ_manual_scores/input/Teleworkable_BNJDopinion.csv

telework<- read_csv("teleworkable2010.csv")
telework<- read_csv("teleworkable2018onwards.csv")


# causes problems for any occupation code that has XX in it!! 
data2$OCCSOC_num <- as.numeric(data2$OCCSOC)

innerjoined<-inner_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))
# 285430 obs in innerjoin
# 352729 obs after updating teleworkable2010 file with broader 5digit codes that 6digit 0
summary(innerjoined$Average_teleworkable)
# 306894 obs after adding 5digitsX and 4digitsXX codes to teleworkable.
# teleworkable values are an average of occupations with same first 5 digits and first 4 digits. 

leftjoined<-left_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))

#innerjoined<-inner_join(data2, telework, by = c("OCCSOC_num"= "BroadGroupCode"))

#leftjoined<-left_join(data2, telework, by = c("OCCSOC_num"= "BroadGroupCode"))
# keeps all observations in data 2 even if they don't match

#antijoin <-anti_join(data2, telework, by = c("OCCSOC_num"= "onetsoc_6digits"))
# 158525. Many were aggregated to 5digits with 6digit as 0.
# 91403 obs after updating teleworkable file to 5digits with 6digit as 0

#couldnt use _num version due to XX in values.
antijoin <-anti_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))
# 50,659 obs after adding 5digitsX and 4digitsXX and 5digits with sixth as 0 to csv file

unique(antijoin$OCCSOC) #121 unique codes did not match.
# down to 67 after adding 5digitsX and 4digitsXX and 5digits with sixth as 0 to csv file

#joined <- joined %>% mutate(occsoc5digits = substr(OCCSOC,1,5))
#table(joined$occsoc5digits)


#table(joined$Teleworkable)

```

Drops a lot of observations using inner join (equivalent to Stata merge==1) this join. 67,299 observations match SOC codes. I think so many do not match due to the use of 2010 , 2019 transition, and 2018 SOC OCC codes. To check this, I try joining the ACS data with the updated 2018 codes. (Authors used 2010 codes in original paper but they did do one for states that appear to have the 2018 codes?) Double check this.

-   Using the 2021 ACS 1-year Sample should use only 2018 OCC codes since that data should be collected after they transitioned their occupation codes.

```{r}

occ_2018 <- read_csv("2018OCCcodes.csv")%>% 
  mutate(soc2018_6figs = as.character(soc2018_6figs))

joined2018codes <- inner_join(data2, occ_2018, 
                              by = c("OCCSOC" = "soc2018_6figs")) %>%
  mutate(occsoc5digits = substr(OCCSOC,1,5))

table(joined2018codes$occsoc5digits)

```

joining the ACS data to the 2018 SOC OCC codes results in 322,863 matches. (322863/357380 = `r 322863/357380`% matched)

**OCC2010 variable labels:**

From DDI on IPUMS download: https://live.usa.datadownload.ipums.org/web/extracts/usa/1985137/usa_00006.xml#OCC

Management, Business, Science, and Arts = 10-430\
Business Operations Specialists = 500-730\
Financial Specialists = 800-950\
Computer and Mathematical = 1000-1240\
Architecture and Engineering = 1300-1540\
Technicians = 1550-1560\
Life, Physical, and Social Science = 1600-1980\
Community and Social Services = 2000-2060\
Legal = 2100-2150\
Education, Training, and Library = 2200-2550\
Arts, Design, Entertainment, Sports, and Media = 2600-2920\
Healthcare Practitioners and Technicians = 3000-3540\
Healthcare Support = 3600-3650\
Protective Service = 3700-3950\
Food Preparation and Serving = 4000-4150\
Building and Grounds Cleaning and Maintenance = 4200-4250\
Personal Care and Service = 4300-4650\
Sales and Related = 4700-4965\
Office and Administrative Support = 5000-5940\
Farming, Fishing, and Forestry = 6005-6130\
Construction = 6200-6765\
Extraction = 6800-6940\
Installation, Maintenance, and Repair = 7000-7630\
Production = 7700-8965\
Transportation and Material Moving = 9000-9750\
Military Specific = 9800-9830\
Unemployed (no occupation for 5+ years) or Never Worked = 9920\

# Stuff I'm not ready to delete yet

## ChatGPT attempt

I attempted to ask Chat GPT how to pull and merge ACS and Onet data. Ignore this section.

```{r eval=FALSE}
library(ipumsr)

il_acs <- load_ipums_acs(year = 2021, survey = "5-year", statefip = 17) %>% select(c("AGE", "SEX", "RACE", "INCWAGE"))

head(il_acs)

```

### Summary tables of Households in IL State, 2016-2020 ACS

These examples all use summary tables (Similar to what Prof. Wu does in Stata code) except these use API commands instead of downloading CSVs from the IPUMS website.

```{r eval=FALSE}
library(tidycensus)
library(acs)


# Download data for table B19001
b19001 <- get_acs(geography = "state", table = "B19001", year = 2019, state = "IL") %>% select(-moe) %>% mutate(hh_pct = estimate / 4846134 * 100) %>% filter(variable != "B19001_001")

# View the data
b19001



# Add labels to the income levels
income_labels <- c("Less than $10,000", "$10,000 to $14,999", "$15,000 $19,999", "$20,000 to $24,999", "$25,000 to $29,999", "$30,000 to $34,999", "$35,000 to $39,999", "$40,000 to $44,999", "$45,000 to $49,999", "$50,000 to $59,999", "$60,000 to $74,999", "$75,000 to $99,999", "$100,000 to $124,999", "$125,000 to $149,999", "$150,000 to $199,999", "$200,000 or More")

# Plot the data with labels
b19001 %>% 
  group_by(variable) %>% 
  dplyr::summarize(sum_hh_pct = sum(hh_pct)) %>%
  ggplot(aes(x = sum_hh_pct, y = variable), labels = income_labels) +
  geom_col() +
#  scale_x_continuous(labels = scales::comma) +
  scale_y_discrete(labels = income_labels)+
  #labs(x = "Number of Households", y = "Income Level") +
  theme_minimal() #+
  #geom_label(aes(label = income_labels), y = 0.5, fill = "white", color = "black")





```

```{r eval = FALSE}

il_acs_state <- get_acs(
  geography = "state",
    table = c("B19001"),

 # variables = c("B19001_001", "B25003_001", "B25003_002"),
  state = "IL"
)


il_household_income <- il_acs_state %>% 
  select(-moe) %>% 
  mutate(total = 4884061,
         hh_income_pct = estimate/total*100) %>% 
  filter(variable != "B19001_001")


il_data_decile <- il_household_income %>%
  filter(HH_income > 0) %>%
  dplyr::group_by(ntile(HH_income, 10)) %>%
  dplyr::summarize(work_from_home_pct = mean(work_from_home_pct))

il_acs_county_AWM <- get_acs(
  geography = "county",
    table = c("B19001"),

 # variables = c("B19001_001", "B25003_001", "B25003_002"),
  state = "IL"
)
# changed from variables = to table = and chose one table. 
# need to pivot this table wider

il_acs_county_AWM %>% select(-moe) %>% pivot_wider(names_from = "variable", values_from = "estimate")

il_acs_county <- get_acs(
  geography = "county",
  variables = c("B19001_001", "B25003_001", "B25003_002"),
  state = "IL",
  output = "wide"
)

il_data <- il_acs_county %>%
  select(GEOID, NAME, B19001_001E, B25003_001E, B25003_002E) %>%
  rename(HH_income = B19001_001E,
         housing_units = B25003_001E,
         work_from_home = B25003_002E) %>%
  mutate(work_from_home_pct = work_from_home / housing_units * 100)

il_data_decile <- il_data %>%
  filter(HH_income > 0) %>%
  dplyr::group_by(ntile(HH_income, 10)) %>%
  dplyr::summarize(work_from_home_pct = mean(work_from_home_pct))

il_data_decile # breaks table

il_data_decile <- il_data %>%
  filter(HH_income > 0) %>%
  dplyr::group_by(ntile(HH_income, 10)) %>%
  dplyr::summarize(work_from_home_pct = mean(work_from_home_pct)) %>% 
  ungroup()

il_data_decile


# chat gpt gave me too many steps and caused problems. Not quite trust worthy. Also dropped variable and didn't ungroup. still impressive. 

il_data <- il_acs_county %>%
  select(GEOID, NAME, B19001_001E, B25003_001E, B25003_002E) %>% rename(HH_income = B19001_001E,
         housing_units = B25003_001E,
         work_from_home = B25003_002E) %>%
  mutate(work_from_home_pct = work_from_home / housing_units * 100)

## bar graph of perccentage of people who worked from home for each income decile
ggplot(aes(x = ntile(HH_income, 10), y = work_from_home_pct)) +
  geom_bar(stat = "identity", aes(fill = factor(ntile(HH_income, 10)))) +
  scale_fill_brewer(palette = "Set1") +
  labs(x = "Income decile", y = "Percentage who worked from home") +
  scale_x_continuous(breaks = 1:10)
```

onetr package [cran.r](https://cran.r-project.org/web/packages/acs/acs.pdf)

waiting for credentials and password

```{r eval=FALSE}
#install.packages("ONETr")
library(ONETr)
setCreds("work_from_home_reser", "6865xvg")
```

## ACS 2019 5-year Data - Original Download

First download that had 2019 and 2021 data together. Then filtered for just 2019. Will probably delete. If anything, the 2019 data needs to be redownloaded if we do use it to add a few variables.

```{r}
ddi <- read_ipums_ddi("usa_00006.xml")
data <- read_ipums_micro(ddi)
data2019 <- data %>% select(-c(STATEFIP, REGION)) %>% filter(YEAR == "2019")
rm(data)
# 621,164 observations for ACS2021 5-Year sample
```

### Descriptive Statistics

```{r}
data <- data2019
rm(data2019)
table(data$EMPSTAT) # unweighted
table(data$LABFORCE) # unweighted

table(data$CLASSWKR)# unweighted


topline(df = data, variable = LABFORCE, weight = PERWT )
crosstab(data, x=MULTYEAR, y = LABFORCE, weight = PERWT)
topline(data, EMPSTAT, PERWT)
crosstab(data, x=MULTYEAR, y = EMPSTAT, weight = PERWT)
```

```{r}
#library(srvyr)
#library(survey)
data <- data %>% 
  mutate(PWSTATE2_clean = as_factor(lbl_na_if(PWSTATE2, ~.val %in% c(0)))) %>%
  mutate(inctot_decile = ntile(INCTOT, 10),
         incwage_decile = ntile(INCWAGE, 10),
         incearn_decile =ntile(INCEARN, 10))  #adds a variable to indicate which decile an observation falls within

#attempt <- svydesign(id=~row(data) , weights=data$PERWT, data=data)
#a <- svyquantile(design=attempt, quantiles = seq(0,1, by=0.1))

#quantile(x, probs = seq(0, 1, 1/10))    # Deciles

summary(as.numeric(data$INCEARN))


# weighted_breaksummary <- data %>% 
#   #srvyr::as_survey(weights = PERWT) %>%
#   group_by(incearn_decile) %>%
#   summarize(decile_min = min(INCEARN),
#             decile_max = max(INCEARN)
#             ) 
# weighted_breaksummary # not actually weighted yet because I used incearn_decile which was created without weighing the data...

unweighted_breaksummary <- data %>% 
  #srvyr::as_survey(weights = c(PERWT)) %>%
  group_by(incearn_decile) %>%
  summarize(decile_min = min(INCEARN),
            decile_max = max(INCEARN)
            ) 
unweighted_breaksummary # NOT WEIGHTED!!!!

# histogram of total income
hist(data$INCEARN, breaks = 60) # unweighted


data %>% 
 # filter (INCTOT < 400000) %>% 
  ggplot(aes(x=INCEARN)) + 
  geom_histogram(bins =  60) + 
  scale_x_continuous(labels = label_dollar())


topline(data, incearn_decile, weight = PERWT)


data$decile <- ntile(data$INCEARN, 10)

# from weights() package
wtd.hist(as.numeric(data$INCEARN), breaks = 40, weight = data$PERWT)

wtd.hist(as.numeric(data$INCEARN), weight = data$PERWT)


# data_svy = svydesign(~1, #no clusters
#                      data = data, 
#                      weight=~PERWT)

  #svyquantile(~INCTOT,data_svy, 
   #                          quantiles=seq(0.1, 0.9, 0.1))

ggplot(data, aes(x=INCEARN)) + 
  geom_histogram(bins =  30) + 
  scale_x_continuous(labels = label_dollar())


```

```{r}
noOCCSOC<- data %>% filter(OCCSOC == 0) #98205 with occsoc=0
table(noOCCSOC$EMPSTAT)


#98% of the people without Occupation codes are not in the labor force. Makes sense. 
topline(df = noOCCSOC, variable = EMPSTAT, weight = PERWT )




data2<- anti_join(data,noOCCSOC)  
# 362787 obs

data2 <- data2 %>% filter(AGE>=25)
#316399 obs

topline(df = data2, variable = EMPSTAT, weight = PERWT )

crosstab(data2, x=MULTYEAR, y = LABFORCE, weight = PERWT)

```

```{r}
#telework csv uses data from Dingle and Nieman
# https://github.com/jdingel/DingelNeiman-workathome/blob/master/occ_manual_scores/input/Teleworkable_BNJDopinion.csv

telework<- read_csv("teleworkable2010_v2.csv")

#telework<- read_csv("teleworkable2010.csv")

# causes problems for any occupation code that has XX in it!! 
#data2$OCCSOC_num <- as.numeric(data2$OCCSOC)

innerjoined<-inner_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))
# ___ obs in innerjoin
# __ obs after updating teleworkable2010 file with broader 5digit codes that 6digit 0

# 312350 obs after adding 5digitsX and 4digitsXX codes to teleworkable.
# teleworkable values are an average of occupations with same first 5 digits and first 4 digits. 

leftjoined<-left_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))

#innerjoined<-inner_join(data2, telework, by = c("OCCSOC_num"= "BroadGroupCode"))

#leftjoined<-left_join(data2, telework, by = c("OCCSOC_num"= "BroadGroupCode"))
# keeps all observations in data 2 even if they don't match

#antijoin <-anti_join(data2, telework, by = c("OCCSOC_num"= "onetsoc_6digits"))
# 158525. Many were aggregated to 5digits with 6digit as 0.
# 91403 obs after updating teleworkable file to 5digits with 6digit as 0

#couldnt use _num version due to XX in values.
antijoin <-anti_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))
# 50,584 obs after adding 5digitsX and 4digitsXX and 5digits with sixth as 0 to csv file

unique(antijoin$OCCSOC)
# down to 73 after adding 5digitsX and 4digitsXX and 5digits with sixth as 0 to csv file

#table(joined$Teleworkable)
```

## Xiaoyan's Merging Notes

Code chunk below is my attempt to manually recode items that didn't match. I think I have an excel file of OCCSOC codes that should match almost completely.

*Double check*

```{r eval=FALSE}

data2021 %>% 
  filter(OCCSOC >0) %>% 
  mutate(telworkable = case_when(
    OCCSOC == "113013" ~ ,
    OCCSOC == "131081" ~ ,
    OCCSOC == "151255" ~ ,
    OCCSOC == "195010" ~ ,
    OCCSOC == "211019" ~ ,
    OCCSOC == "211029" ~ ,    
    OCCSOC == "211092" ~ ,
    OCCSOC == "211093" ~ ,
    OCCSOC == "212099" ~ ,
    OCCSOC == "232099" ~ ,
    OCCSOC == "2504022" ~ "0", # libararians and media collections specialists. 
    OCCSOC == "272091" ~ , # disc jockets. Was 272099
    OCCSOC == "272099" ~ "RECODED",
    OCCSOC == "273092" ~  "1", #court reporters and captioners 
    OCCSOC == "273099" ~ "1", # media and comunication workers, all other
    OCCSOC == "311122" ~ "0",   # personal care aids
    OCCSOC == "331090" ~ "0",    # healthcare and support specialists 
    OCCSOC == "339094" ~ ,    
    OCCSOC == "359099" ~ ,    
    OCCSOC == "413091" ~ "0",
    OCCSOC == "419099" ~  "0", # sales and related workers all other
    OCCSOC == "432099" ~ "0.5", # communications equipment operators, all other
    OCCSOC == "4330XX" ~ "0.5", # 43 is office and admin support
    OCCSOC == "513099" ~ "0", #food processing workers
    OCCSOC == "533099" ~  "0", # motor vehicle operators
    OCCSOC == "537065" ~ "0", # stockers and order fillers
    OCCSOC == "551010" ~ "0", # miltary 
    OCCSOC == "552020" ~ "0", # military
    OCCSOC == "553010" ~ "0", # military
    OCCSOC == "559830" ~ "0", # military
TRUE ~ as.character(OCCSOC))



    )
```

\*\*\*\*merge\*\*\*\*

merge m:1 occsoc using "/Users/xiaoyanhu/Desktop/crosswalk.dta"

\*IL has but DN no: 29, merge==2

\*113013 Facilities Managers

\*131082 Project Management Specialists

\*151255 Web And Digital Interface Designers

\*195010 Occupational Health And Safety Specialists And Technicians

\*211019 Counselors, All Other

\*211029 Social Workers All Other

\*211092 Probation Officers and Correctional Treatment Specialists

\*211093 Social and Human Service Assistants

\*212099 Religious Workers, All Other

\*232099 Legal Support Workers, All Other

\*272091 Disc Jockeys, Except Radio

\*272099 Entertainers and Performers, Sports and Related Workers, All Other

\*273092 Court Reporters And Simultaneous Captioners

\*273099 Media And Communications Workers, All Other

\*311122 Personal Care Aides

\*331090 Miscellaneous First-Line Supervisors, Protective Service Workers

\*339094 School Bus Monitors

\*359099 Food Preparation and Serving Related Workers, All Other

\*413091 Sales Representatives Of Services, Except Advertising, Insurance, Financial Services, And Travel

\*419099 Sales and Related Workers, All Other

\*432099 Communications Equipment Operators, All Other

\*4330XX Other Financial Clerks

\*513099 Food Processing Workers, All Other

\*533099 Motor Vehicle Operators, All Other

\*537065 Stockers And Order Fillers

\*551010 Military Officer Special and Tactical Operations Leaders

\*552010 First-Line Enlisted Military Supervisors

\*553010 Military Enlisted Tactical Operations and Air/Weapons Specialists and Crew Members

\*559830 Military, Rank Not Specified

\*DN has but IL no: 7, merge==1

\*\* AWM - These were 2010 codes that have been changed to 2018 SOC codes

\*119061 Funeral Service Managers #Code and Title change to 119171

\*119131 Postmasters and Mail Superintendents #Didn't change, should have been in their file?

\*173021 Aerospace Engineering and Operations Technicians

\*173022 Civil Engineering Technicians

\*232091 Court Reporters

\*413099 Energy Brokers

\*433041 Gaming Cage Workers
