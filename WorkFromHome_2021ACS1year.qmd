---
title: "Work From Home: Who Can and Who Does?"
subtitle: "Using 2021 1-Year ACS Data"
#format: docx

format:
  html:
    toc: true
    toc_float: true
    df-print: paged
---

# Getting Data

```{r setup, warning=FALSE, message=FALSE}

library(scales)
library(reldist)
library(pollster)
library(labelled)
library(weights)
library(tigris)
library(ipumsr)
library(tidyverse)
#install.packages("naniar")
library(naniar)
```

## ACS data Notes

Survey questions for EMPSTAT & LABFORCE:

1.  Last week, did this person work for pay at a job or business? (Yes or no) -- Yes becomes coded as EMPSTAT = 1-Employed.
2.  Last week, did this person do ANY work for pay, even as little as one hour?(Yes or no) -- Yes becomes coded as LABFORCE = 2-Yes in the labor force.

Survey questions for INCEARN:

1.  INCEARN = INCWAGE + INCBUS00
    1.  Total amount earned in last 12 months: Wages, salary, commissions, bonuses, tips. \[Yes --\> \_\_\_\_\_\_ \] is coded as INCWAGE value.

        1.  INCWAGE is topcoded only at the 99.5th percentile with a state. So less than 1% of incomes will be coded as a lower value. [Source](https://usa.ipums.org/usa-action/variables/INCWAGE#editing_procedure_section). Not a problem.

    2.  Total amount earned in last 12 months: Self-employment income from own businesses (includes farms, nonfarms, proprietorship, and partnerships). \[Yes --\> \$\_\_\_\_\] is coded as INCBUS00 value.

-   INCEARN includes self-employment income, INCWAGE does not.

    -   INCWAGE does not include Farming income and self-employment income, but INCEARN does.
    -   INCEARN is not itself topcoded but some variables that go into it are slightly topcoded. Shouldn't impact analysis.

`usa_00011.xml` and `usa_00011.dat.gz` are the same as Box files named `IL_2021_1yr_ACS.dat.gz` and `IL_2021_1yr_ACS_datDDI.xml`

> original xml file references the file name that it is called in the download. Either change the XML file to reference the correct .dat.gz files OR just keep track of which extracts are the same as the box file names.

```{r}
# old version with less variables:
#ddi <- read_ipums_ddi("usa_00009.xml") # 45 variables
#data <- read_ipums_micro(ddi) # 126623 observations before any filtering

# larger version with 147 variables. uses same file as Box file named "IL_2021_1yr_ACS.dat.gz and IL_2021_1yr_ACS_datDDI.xml
ddi <- read_ipums_ddi("usa_00011.xml") # downloaded April 10 2023
data <- read_ipums_micro(ddi) # 126623 observations before any filtering

# same sample but with 150+ variables. 
# NEED TO CHANGE XML file that referneces the data file. currently says usa_00011.dat.gz so these two lines of code do not work. 
#ddi <- read_ipums_ddi("C:/Users/aleaw/Box/Fiscal Futures/FY22_Working/WFH/Data/IL_2021_1yrACS_datDDI.xml") # downloaded April 10 2023
#data <- read_ipums_micro(ddi) # 126623 observations before any filtering

data <- data %>% select(INCEARN, INCWAGE, INCTOT,TRANWORK, OCCSOC,CLASSWKR, EMPSTAT, LABFORCE, PERWT, COUNTYFIP, PUMA, PWSTATE2, AGE, STRATA, RACE, SEX,)



# replaces 0 with NA for variables listed. Allows topline to calculate "Valid Percent" when it recognizes missing values

data <- data %>% replace_with_na(replace = list(
  EMPSTAT= c(0), 
  LABFORCE=c(0), 
  CLASSWKR = c(0),
  OCCSOC = c(0),
  TRANWORK = c("N/A","0")))



```

# Xiaoyan replication

126,623 observations originally in ACS 2021 1-year sample.

```{r}

data25to64 <- data %>% 
  filter(AGE > 24 & AGE < 65)
# 65,675 observations in age range

dataXH <- data25to64 %>% filter(LABFORCE == 2)
# 50,817 observations are in labor force and 25-64 years old

rm(data25to64)



table(dataXH$RACE)
topline(df = dataXH, variable = RACE, weight = PERWT )

# manually making summary table that has observation counts and weighted estiamtes:
dataXH %>% 
  group_by(as_factor(RACE)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weighted = round(weightedcount/sum(weightedcount), digits = 3),
         pct_noweight = round(unweightedcount/sum(unweightedcount), digits = 3))
## Matches table() and topline() outputs! That's good. Can use this format to see counts and estimates with percentages all together.


```

```{r desc-sex}
dataXH %>% 
  group_by(as_factor(SEX)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weighted = round(weightedcount/sum(weightedcount), digits = 3),
         pct_noweight = round(unweightedcount/sum(unweightedcount), digits = 3))
```

```{r desc-tranwork}
dataXH %>% 
  group_by(as_factor(TRANWORK)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weighted = round(weightedcount/sum(weightedcount), digits = 3),
         pct_noweight = round(unweightedcount/sum(unweightedcount), digits = 3))

#attributes(dataXH$TRANWORK)
#table(dataXH$TRANWORK)

dataXH <- dataXH %>% 
  mutate(did_wfh = if_else(TRANWORK==80, 1,2)) # 1 = wfh, 2 = did not wfh
# 9,470 observations worked from home
# 37,584 did not work from home.
table(dataXH$did_wfh)


dataXH %>% 
  group_by(as_factor(did_wfh)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weighted = round(weightedcount/sum(weightedcount), digits = 3),
         pct_noweight = round(unweightedcount/sum(unweightedcount), digits = 3))

topline(dataXH, did_wfh, weight = PERWT)

```

18.9% of Illinois workers worked at home. 74% went to work using some form of transportation, 7.4% of observations were missing values.

-   20.5% of observations with responses did WFH
-   79.4% of observations with responses did not WFH

```{r binary-variables-for-tables}
dataXH <- dataXH %>% 
  mutate(
    has_incearn = ifelse(INCEARN > 0, 1, 2), ## has earned income = 1
    has_occsoc = ifelse(OCCSOC > 0, 1, 2) ## OCCSOC code greater than zero coded as 1
    )
table(dataXH$has_occsoc)
xtabs(did_wfh~has_incearn, data = dataXH)

xtabs(has_occsoc~has_incearn, data = dataXH)
table(dataXH$has_incearn, dataXH$has_occsoc)
table(dataXH$did_wfh, dataXH$has_occsoc)
table(dataXH$did_wfh, dataXH$has_incearn)
# 9,464 observations worked from home and have income values
# 37,561 observations did not work from home and have income values.


```

9,464 observations worked from home and have income values\
37,561 observations did not work from home and have income values.

# Alea dwelling on which observations to include

126,623 observations originally in ACS 2021 1-year sample.

-   63,453 obs in labor force

    -   Survey question asks if they have worked during the last week. So they could be recently unemployed and still have earned income that year and

-   63,113 observations have earned incomes (`incearn`)\> \$0.

How many people are in labor force and have incomes of zero or less than zero? (In the Labor force = EMPSTAT employed(1)+unemployed(2)

-   41,289 observations are not in the labor force.

    -   41,275 observations are not in the labor force and have INCEARN values equal to 0. Drop from sample.

    -   3,829 observations are not in the labor force but have INCEARN values greater than zero. They also have OCCSOC codes. Let's keep them in sample. for now.

Should they be removed right away?

```{r}

# data %>% filter(INCEARN > 0) 
# 63,113 observations have incomes greater than zero
# data %>% filter(INCEARN >= 0) 
# 126,570 obs are > or = to 0 (almost all obs, not useful)
# data %>% filter(INCEARN >= 0 & EMPSTAT == 1)  
# 59,221 are in labor force and have earned income values >= $0
# data %>% filter(INCEARN >= 0 & EMPSTAT == 1)  
# data %>% filter(INCEARN > 0 & EMPSTAT == 1)  
# 59,214 obs in labor force and have income greater than $0.
# ^ These are our main sample observations before 

table(data$LABFORCE)
#63,453 obs in labor force (LABFORCE ==2)

table(data$EMPSTAT)
#59,259 obs are employed (EMPSTAT == 1)
# 41,289 obs are not in labor force (EMPSTAT == 3)


# how many are not in labor force but had personal earned income values?
data %>% 
  filter(EMPSTAT == 3 & 
           INCEARN > 0) 
# 3,879 observations have INCEARN data but are not in the labor force. 


# who is not in labor force but has earned income greater than zero? 
# do they have occupation codeS?
data %>% 
  filter(EMPSTAT == 3 & INCEARN >0) %>% 
  group_by(OCCSOC) %>% 
  summarize(count = n())
# they all have occupation codes. Lets keep them in our sample. 



#### LABOR FORCE & EARNED INCOME (EMPSTAT & INCEARN) ####
# 1 is employed, 2 is unemployed
# 3 is not in labor force
# 0 is missing value

data %>% 
  filter(INCEARN> 0) %>% 
  group_by(EMPSTAT) %>% 
  summarize(count = n())

data %>% 
  filter(INCEARN == 0) %>% 
  group_by(EMPSTAT) %>% 
  summarize(count = n())
# only 7 observations are considered employed and have a incearn == 0. That's good. 
# 2,173 had earned incomes of 0 and were unemployed but in the labor force. Makes sense.

# 37,396 obs were not in labor foce and had earned incomes of zero. Makes sense. 
#### ^ These observations should be dropped from sample. #### 

data %>% 
  filter(INCEARN < 0) %>% 
  group_by(EMPSTAT) %>% 
  summarize(count = n())

## Very few observations have incearned less than zero. 
## Let's drop INCEARN <0 from sample. 
```

::: {.callout-important icon="false"}
## Drop observations?

1.  37,396 observations have earned incomes = \$0 and they are not in the labor force.
2.  21,881 observations are missing income values for `incearn`
3.  53 observations have earned incomes \< \$0.

They should all be dropped, right??
:::

```{r eval=FALSE}
#Do any observations have missing values for incearn but values for inctot?

#48,056 observations have total income values > $0 but earned income values = $0. retired people with SSI? 

#How many of 48,056 are in labor force?â€¦. Only 7. So don't worry about it. 
data %>% filter(INCEARN == 0 & 
                  INCTOT > 0 &
                  EMPSTAT == 1
                )
```

```{r eval=FALSE}
data %>% 
  filter(EMPSTAT == 3) %>%  
  # 41,289 observations are NOT in the labor force. 
  summarize(count = n())

data %>% 
  filter(EMPSTAT == 3 & OCCSOC >0) %>%  
  # 12,656 observations are NOT in the labor force but they DO have occupation codes. 
  summarize(count = n())

data %>% 
  filter(EMPSTAT == 2 & OCCSOC >0) %>%  
  summarize(count = n())
  # 4,194 observations are unemployed but they DO have occupation codes. 
  # ACS question asks if they worked the last week. 
  # Could be recently unemployed but still have useful info. Keep in sample?


data %>% 
  filter(EMPSTAT == 3 & OCCSOC >0) %>%  
  summarize(count = n())
# 12,656 are not in labor force but have occupation codes
# remember, if not in labor force, ACS uses occupation that they had in the last 5 years
# drop from sample. We are interested in workers with data about this yer. 
```

Now using only observations that are between the ages of 25 and 65:

::: callout-note
## Why don't we care about younger workers?

Are we still using the 25-64 age range for our sample? Pros and cons of including/excluding?

-   Pro: Other literature used same age range

-   Con: Smaller sample. Loss of potentially interesting information on younger workers.
:::

```{r}
data25to64 <- data %>% 
  filter(AGE > 24 & AGE < 65)
# 65,675 observations in age range

data25to64 %>% filter(INCEARN >0)
# 50,993 observations with earned income > $0

```

### Labor Force Variables

`OCC2010` is a harmonized occupation coding scheme as broad groups. These are 4 characters long and are the first 4 characters of the longer ONET & SOC codes.

`OCCSOC` is 6 digits long. It is the first 6 digits of 8-digit ONET code.

-   Please note that in some cases the SOC occupation codes are aggregated if they do not have an exact match to a Census occupation code or to preserve confidentiality in cases where the category contained fewer than 10,000 people nationwide.

`LABFORCE` for if in labor force. 1 = not in labor force, 2 = in labor force, 0 is NA

`EMPSTAT` and `EMPSTATD` for employment status (simple and the detailed version). 1=employed, 2=unemployed, 3=not in labor force for empstat, 0 is NA

-   for those who are unemployed, data refers to most recent job if it was within the last 5 years.

`CLASSWKRD` might be useful. Contains info on self-employed, wages, salary, etc for class of worker.

IPUMS [link for Survey package](https://usa.ipums.org/usa/repwt.shtml)

IPUMS OCC codes over time [link](https://usa.ipums.org/usa/volii/occsoc18.shtml)

```{r worker-descstats}

# replaces 0 with NA for variables listed. Allows topline to calculate "Valid Percent" when it recognizes missing values

data <- data %>% replace_with_na(replace = list(
  EMPSTAT= c(0), 
  LABFORCE=c(0), 
  CLASSWKR = c(0),
  TRANWORK = c("N/A","0")))


# Employment Status
table(data$EMPSTAT) # unweighted

data %>% 
  group_by(as_factor(EMPSTAT)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))

topline(data, EMPSTAT, PERWT)

# Labor Force
data %>% 
  group_by(as_factor(LABFORCE)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))


# Class of Worker
data %>% 
  group_by(as_factor(CLASSWKR)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))
# data %>% 
#   group_by(as_factor(TRANWORK)) %>%
#   dplyr::summarize(weightedcount=sum(PERWT),
#                    unweightedcount = n()) %>%  #weighted
#   mutate(pct_weight = weightedcount/sum(weightedcount),
#          pct_noweight = unweightedcount/sum(unweightedcount))

topline(df = data, variable = LABFORCE, weight = PERWT )


```

*Unweighted -*

*EMPSTAT: 59,259 observations are employed, 4,194 unemployed observations, and 41,289 observations are not in the workforce (21,881 NAs)*

*LABFORCE: 63,453 are in labor force, 41,289 are not. (21,881 NAs)*

*CLASSWKR: Of these, 68,388 work for wages and 7183 people are self-employed. (51,052 NA)*

[**Weighted**]{.underline} **-**

EMPSTAT: 6,102,522 people are employed (49%), 479,879 people are unemployed (3.8%), and 3,624,811 are not in the labor force (29%). There are 2,463,257 missing values; Same as LABFORCE.

LABFORCE: 6,582,401 people (52%) are in the labor force. 3,625,811 (28%) of people are not in the labor force. 2,463,257 (20%) of observations missing values.

-   employed and unemployed equal number of people in labor force - that's good

Location of primary workplace: 5.8 million people located in Illinois.

Compare average income for counties in Illinois to Summary tables from Census.

For the counties that can be identified in the data (populations \> 60,000 or 100,000 or 200,000? Double check), the census summary tables are close but not identical to the tables calculated with the ACS sample data.

```{r summarytable-check}

data %>% 
  group_by(as_factor(EMPSTAT), COUNTYFIP) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))

crosstab(data, COUNTYFIP, EMPSTAT, weight=PERWT)
```

19 is Champaign, 31 is Cook, 37 is DeKalb, 43 is DuPage, 89 is Kane, 111 is McHenry, etc.

Economic Characteristics summary table: [link](https://data.census.gov/table?t=Employment&g=040XX00US17,17$0500000&tid=ACSDP1Y2021.DP03&moe=false&tp=false)

### Income deciles

```{r warning=FALSE, message=FALSE}


summary(as.numeric(data$INCEARN))

# 999999 is missing values and want positive income values
data <- data %>% 
  filter(INCEARN>0 & INCWAGE != 999999 & INCWAGE != 999998)  %>% 
  filter(AGE > 25)
# 104,689 obs remaining if >=0
# 65113 obs if > 0
# 55332 observations if also older than 25



summary(as.numeric(data$INCEARN))

```

> When filtering for ages greater than 25, observations go from \~65,000 to \~55,000. Do we want to drop this age group? Are we not interested in younger workers?

[Xiaoyan decile cutoffs, stata code:]{.underline}\
summarize incearn, detail\
\*generate percentile and percent (equal frequency)\
pctile pct=incearn, nq(10) genp(percent)\
list percent pct in 1/10\
\*how to incorporate svy weight in dividing the percentiles?\
\*generate percentile range based on perentile calculation\
gen pctr="(0,10%\]" if incearn\<= 2024\
replace pctr="(10%,20%\]" if incearn\> 2024&incearn\<=13558\
replace pctr="(20%,30%\]" if incearn\>13558&incearn\<=23417\
replace pctr="(30%,40%\]" if incearn\>23417&incearn\<=31961\
replace pctr="(40%,50%\]" if incearn\>31961&incearn\<=40725\
replace pctr="(50%,60%\]" if incearn\>40725&incearn\<=51104\
replace pctr="(60%,70%\]" if incearn\>51104&incearn\<=63922\
replace pctr="(70%,80%\]" if incearn\>63922&incearn\<=81000\
replace pctr="(80%,90%\]" if incearn\>81000&incearn\<=111993\
replace pctr="(90%,100%\]" if incearn\>111993

```{r message=FALSE, warning=FALSE}

telework<- read_csv("teleworkable2018onward.csv")

telework <- telework %>% 
  mutate(CanWorkFromHome = case_when(
  teleworkable == 0 ~ "No WFH",
  teleworkable < 1 ~ "Some WFH",
  teleworkable == 1 ~ "Can WFH",
  TRUE ~ "Check Me")
  )

table(telework$CanWorkFromHome)
  
# causes problems for any occupation code that has XX in it!! 
#data2$OCCSOC_num <- as.numeric(data2$OCCSOC)

joined<-left_join(data, telework, by = c("OCCSOC"= "occ_codes"))

summary(joined$teleworkable)
# teleworkable values are an average of occupations with same first 5 digits and first 4 digits.


joined %>% 
  filter(CanWorkFromHome == "Some WFH") %>% 
  distinct(OCCSOC)


library(srvyr)
#as_survey() from srvyr package

dstrata <- joined %>% as_survey(strata = STRATA , weights = PERWT)

dstrata <- dstrata %>% 
  mutate(percentile = ntile(INCEARN,100),
         decile = ntile(INCEARN, 10))
         #,decile2 = survey_quantile(INCEARN, c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)))

dstrata


summary <- dstrata %>% 
  group_by(decile) %>% 
  summarize(min = min(INCEARN),
            max=max(INCEARN),
            avg_income = mean(INCEARN),
            average_income = survey_mean(INCEARN),
            pop_represented = sum(PERWT),
            obs_count = n())

sum(summary$pop_represented)
summary 

summary %>% ggplot(aes(x=decile, y=average_income)) + geom_col()


dstrata %>% 
  as_data_frame()%>% 
  ggplot(aes(x=decile)) + 
  geom_bar(aes(fill=CanWorkFromHome), position="dodge") + 
  labs(title = "Count of observations")


dstrata %>% 
  as_data_frame()%>% 
  ggplot(aes(x=decile)) + 
  geom_bar(aes(y = (..count../sum(..count..)), fill=CanWorkFromHome), position="dodge")+
  labs(title = "Percent of observations")

dstrata %>% 
  as_data_frame()%>% 
  ggplot(aes(x=decile, y = (..count..)/sum(..count..)*10, fill = CanWorkFromHome)) + 
  #geom_bar(aes(fill=CanWorkFromHome), position="dodge")+
    geom_bar(aes(fill = CanWorkFromHome), position = "dodge") +

  coord_flip()+   #geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.25) +
     # scale_y_reverse(limits = rev)+

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+ 
  scale_y_continuous(labels = scales::percent)+
  theme(legend.position = "bottom") +
  labs(title = "Able to work from home by income decile", 
       y = "Percent of Workers in each Income Decile",
       x = "",
       caption = "n = 55,332 observations in 2021 1-year sample. 
       Represents the 5.58 million people in Illinois' workforce older than 25 and with earned income > $0.
       Reading image example: If 10% of workers in the 'Bottom 10%' income decile cannot work from home, 
       that is roughly equivalent to 1% of the labor force who can't work from home.")


dstrata %>% 
  as_data_frame()%>% 
  ggplot(aes(x=decile, y = (..count../sum(..count..)*10))) + 
  geom_bar(aes(fill=CanWorkFromHome), position="dodge")+

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+ 
  theme(legend.position = "bottom") +
  scale_y_continuous(labels = scales::percent)+
  labs(title = "Same graph but flipped axes: 
       Able to work from home by income decile", 
       y = "Percent of Workers in each Income Decile",
       caption = "n = 55,332 observations in sample. 
       Represents the 5.58 million people in Illinois with INCEARN>0 and older than 25.")


```

```{r incearn-descripstats, warning=FALSE, message=FALSE}

summary(as.numeric(data$INCTOT))
summary(as.numeric(data$INCEARN))

attributes(data$INCTOT)
attributes(data$INCEARN)

#### WRONG ####
data <- data %>% 
  mutate(incearn_decile = ntile(INCEARN, 10)#,
         
         ## WRONG ###
      #   percent_weight = PERWT / sum(PERWT)*100) %>% 
  #adds a variable to indicate which decile an observation falls within
#  mutate(perwt_decile = ntile(percent_weight, 10)
)

### WRONG ##### 
breaksummary <- data %>% 
  group_by(incearn_decile)%>%
  #group_by(incearn_decile) %>%
  summarize(decile_min = min(INCEARN),
            decile_max = max(INCEARN)
            ) 
breaksummary

table(data$incearn_decile) #equal number of people, yay
 # but are these deciles based on weighted or unweighted observations....


```

Another attempt to see weighted vs unweighted counts that become deciles.

```{r}

# Not deciles! histogram broke it into 10 chunks with equal distance between each income level ($100K, 200K, 300K, etc. )

# 
# #unweighted
# h_unweighted<-wtd.hist(as.numeric(data$INCEARN), breaks = 10)
# 
# #weighted
# h_weighted <- wtd.hist(as.numeric(data$INCEARN), breaks = 10,
#          weight = data$PERWT)
# 
# 
# h_unweighted
# h_weighted
# 
# h_unweighted$breaks
# 
# h_weighted$breaks
```

Look at decile breaks for **INCWAGE** and **INCEARN**:

*These are different than Xiaoyans*? Double check??

```{r}
data2 <- data %>% filter(OCCSOC != 0) # none are dropped


### WAGES ####
income_deciles <- data2 %>% 
  group_by(ntile(INCWAGE, 10)) %>%
  dplyr::summarize(mean_inc = mean(INCWAGE)) 

income_deciles

data2 %>% 
  group_by(ntile(INCWAGE,10)) %>%
  dplyr::summarize(mean_inc = mean(as.numeric(INCWAGE)) )%>%
  ungroup() %>%
  mutate(INCWAGE_decile='ntile(INCWAGE,10)') %>%
  ggplot(aes(x = ntile(INCWAGE_decile,10), y=mean_inc)) + 
  geom_bar(stat = "identity") +
  labs(x="Income decile", y="Mean Income", title = "Average Income for each Income Decile.") +
  scale_x_continuous(breaks = 1:10)



### INCEARN ###
income_deciles <- data2 %>% 
  group_by(ntile(INCEARN, 10)) %>%
  dplyr::summarize(mean_inc = mean(INCEARN)) 

income_deciles

data2 %>% 
  group_by(ntile(INCEARN,10)) %>%
  dplyr::summarize(mean_inc = mean(as.numeric(INCEARN)) )%>%
  ungroup() %>%
  mutate(INCEARN_decile='ntile(INCEARN,10)') %>%
  ggplot(aes(x = ntile(INCEARN_decile,10), y=mean_inc)) + 
  geom_bar(stat = "identity") +
  labs(x="Income decile", y="Mean Income", title = "Average Income for each Income Decile using INCEARN.") +
  scale_x_continuous(breaks = 1:10)
```

### Occupation codes & teleworkability

teleworkable2010.csv has the 6digit OCCSOC codes. I also added the 5 digit broader version that ends with a 0 in the 6th digit to increase the chances of matching.

Updated teleworkable2010.csv again with 4digitXX codes and 5digitXcodes to increase matching.

`teleworkable2018onward.csv` has all codes (2010, 2019 transition, & new 2018 codes).

```{r}

# noOCCSOC<- data %>% 
#   filter(OCCSOC == 0) #98205 with occsoc=0
# 
# table(noOCCSOC$EMPSTAT)
# 
# before filtering out the incwage and inctot variables for 0's and negatives, 
# #98% of the people without Occupation codes are not in the labor force. Makes sense
# all observations have occsoc codes after filtering for INCWAGE and INCTOT and previous steps

data2 <- data %>% filter(OCCSOC != 0) # none are dropped

topline(df = data2, variable = EMPSTAT, weight = PERWT )

sum(data2$PERWT) # 5.58 million people represented by remaining observations in sample



#telework csv uses data from Dingle and Nieman
# https://github.com/jdingel/DingelNeiman-workathome/blob/master/occ_manual_scores/input/Teleworkable_BNJDopinion.csv

#telework<- read_csv("teleworkable2010.csv")
telework<- read_csv("teleworkable2018onward.csv")

telework <- telework %>% 
  mutate(CanWorkFromHome = case_when(
  teleworkable == 0 ~ "No WFH",
  teleworkable < 1 ~ "Some WFH",
  teleworkable == 1 ~ "Can WFH",
  TRUE ~ "Check Me")
)
table(telework$CanWorkFromHome)
  
# causes problems for any occupation code that has XX in it!! 
#data2$OCCSOC_num <- as.numeric(data2$OCCSOC)

innerjoined<-inner_join(data2, telework, by = c("OCCSOC"= "occ_codes"))
# 65113 obs in innerjoin

summary(innerjoined$teleworkable)
# teleworkable values are an average of occupations with same first 5 digits and first 4 digits. 

innerjoined %>% count()

g <- ggplot(innerjoined, aes(INCEARN))

g + geom_bar(width=10000)

g + geom_bar(aes(weight = PERWT),width=10000)


sum(innerjoined$PERWT)

# innerjoined  %>% ggplot() +
#   geom_bar(aes(ntile(INCEARN,10)), weight=PERWT, bins = 10)+
#   labs(title = "Unweighted Income Distribution")

# ggplot(innerjoined) +
#   geom_bar(aes(x=ntile(INCEARN,10), weight = PERWT), bins = 10, stat = "identity")+
#   labs(title = "Unweighted Income Distribution")
# 
# # didn't change =[ 
# ggplot(innerjoined, aes(INCEARN)) +
#   geom_histogram(aes(weight =  data2$PERWT), bins = 100, stat = "freq")+
#   labs(title = "Weighted Income Distribution")
# 
# ggplot(innerjoined, aes(INCEARN)) +
#   geom_histogram(aes(), bins = 10)+
#   labs(title = "Unweighted Income Distribution")

# didn't change =[ 
h_w <- ggplot(innerjoined, aes(INCEARN)) +
  geom_histogram(aes(weight =  data2$PERWT), bins = 10)+
  labs(title = "Weighted Income Distribution")
h_w$breaks




```

```{r}
innerjoined %>% ggplot() + 
  geom_col(aes(x=ntile(INCWAGE,10), y=PERWT, fill = CanWorkFromHome), position = "dodge") +
  labs(title = "Ability to Work from Home based on Occupation Characteristics", x = "Income decile", caption= "Based on D&N teleworkable categorization and expanded for new 2018 SOC OCC codes. 
       Sample: 2021 ACS 1-Year, 65,113 observations 
       representing 6.67 million people in Illinois' workforce.")

innerjoined %>% ggplot() + 
  geom_bar(aes(x=ntile(INCWAGE,10), fill = CanWorkFromHome), position = "dodge") +
  labs(title = "Ability to Work from Home based on Occupation Characteristics", x = "Income decile", caption= "Based on D&N teleworkable categorization and expanded for new 2018 SOC OCC codes. 
       Sample: 2021 ACS 1-Year, 65,113 observations 
       representing 6.67 million people in Illinois' workforce.")

leftjoined<-left_join(data2, telework, by = c("OCCSOC"= "occ_codes"))
summary(innerjoined$teleworkable)
#innerjoined<-inner_join(data2, telework, by = c("OCCSOC_num"= "BroadGroupCode"))

#leftjoined<-left_join(data2, telework, by = c("OCCSOC_num"= "BroadGroupCode"))
# keeps all observations in data 2 even if they don't match

#antijoin <-anti_join(data2, telework, by = c("OCCSOC_num"= "onetsoc_6digits"))
# 158525. Many were aggregated to 5digits with 6digit as 0.
# 91403 obs after updating teleworkable file to 5digits with 6digit as 0

#couldnt use _num version due to XX in values.
#antijoin <-anti_join(data2, telework, by = c("OCCSOC"= "onetsoc_6digits"))
# 50,659 obs after adding 5digitsX and 4digitsXX and 5digits with sixth as 0 to csv file

#unique(antijoin$OCCSOC) #121 unique codes did not match.
# down to 67 after adding 5digitsX and 4digitsXX and 5digits with sixth as 0 to csv file

#joined <- joined %>% mutate(occsoc5digits = substr(OCCSOC,1,5))
#table(joined$occsoc5digits)


#table(joined$Teleworkable)
```

Drops a lot of observations using inner join (equivalent to Stata merge==1) this join. 67,299 observations match SOC codes. I think so many do not match due to the use of 2010 , 2019 transition, and 2018 SOC OCC codes. To check this, I try joining the ACS data with the updated 2018 codes. (Authors used 2010 codes in original paper but they did do one for states that appear to have the 2018 codes?) Double check this.

-   Using the 2021 ACS 1-year Sample should use only 2018 OCC codes since that data should be collected after they transitioned their occupation codes.

```{r occ-joins, eval=FALSE}

occ_2018 <- read_csv("2018OCCcodes.csv") %>% 
  mutate(soc2018_6figs = as.character(soc2018_6figs))

joined2018codes <- inner_join(data2, occ_2018, 
                              by = c("OCCSOC" = "soc2018_6figs")) %>%
  mutate(occsoc5digits = substr(OCCSOC,1,5))
# 59,626 observations

antijoin <- anti_join(data2, occ_2018, by = c("OCCSOC" = "soc2018_6figs"))
table(antijoin$OCCSOC)



table(joined2018codes$occsoc5digits)

occ_2018 <- read_csv("teleworkable2018onwards.csv") %>% 
  mutate(onetsoc_6digits = as.character(onetsoc_6digits))

joined2018codes <- inner_join(data2, occ_2018, 
                              by = c("OCCSOC" = "onetsoc_6digits")) %>%
  mutate(occsoc5digits = substr(OCCSOC,1,5))
# 65113 observations? 
# I think they all matched? Now I just need to finish creating the average teleworkable variable



```

joining the remaining observations from 2021 1-year ACS data to the 2018 OCC codes results in 65113 matches

**OCC2010 variable labels:**

From DDI on IPUMS download: https://live.usa.datadownload.ipums.org/web/extracts/usa/1985137/usa_00006.xml#OCC

Management, Business, Science, and Arts = 10-430\
Business Operations Specialists = 500-730\
Financial Specialists = 800-950\
Computer and Mathematical = 1000-1240\
Architecture and Engineering = 1300-1540\
Technicians = 1550-1560\
Life, Physical, and Social Science = 1600-1980\
Community and Social Services = 2000-2060\
Legal = 2100-2150\
Education, Training, and Library = 2200-2550\
Arts, Design, Entertainment, Sports, and Media = 2600-2920\
Healthcare Practitioners and Technicians = 3000-3540\
Healthcare Support = 3600-3650\
Protective Service = 3700-3950\
Food Preparation and Serving = 4000-4150\
Building and Grounds Cleaning and Maintenance = 4200-4250\
Personal Care and Service = 4300-4650\
Sales and Related = 4700-4965\
Office and Administrative Support = 5000-5940\
Farming, Fishing, and Forestry = 6005-6130\
Construction = 6200-6765\
Extraction = 6800-6940\
Installation, Maintenance, and Repair = 7000-7630\
Production = 7700-8965\
Transportation and Material Moving = 9000-9750\
Military Specific = 9800-9830\
Unemployed (no occupation for 5+ years) or Never Worked = 9920\

## PUMAs and Shapefiles

```{r warning = FALSE, message=FALSE, results='hide'}


# PUMA shapefiles
pumasIL <- pumas("IL", cb=T, year=2019)
#county shapefiles
countyIL <- counties("IL", cb=T, year=2019)

#pumasdf <- fortify(pumasIL, region = 'PUMACE10')
```

```{r warning = FALSE, message=FALSE}

pums_weighted <- data %>% 
  group_by(PUMA, COUNTYFIP) %>% 
  summarize(weighted = sum(PERWT)) %>%  #number of people the sample represents
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))

pums_unweight <- data %>% 
  group_by(PUMA, COUNTYFIP) %>% 
  summarize(unweight = n()) %>% #unweighted number of observations
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))

plotweighted <- pumasIL %>% 
  left_join(pums_weighted, by = c("PUMACE10" = "PUMA"))

plotunweight <- pumasIL %>% 
  left_join(pums_unweight, by = c("PUMACE10" = "PUMA"))

plot(plotweighted["weighted"])
plot(plotunweight["unweight"])

FIPweighted <- countyIL %>% left_join(pums_weighted, by = c("COUNTYFP" = "countyFIP"))
FIPunweight <- countyIL %>% left_join(pums_unweight, by = c("COUNTYFP" = "countyFIP"))
plot(FIPweighted["weighted"])
plot(FIPunweight["unweight"])


plot(countyIL["COUNTYFP"])


```

#### PUMAS vs COMMZONE vs COUNTIES

[Link from Francis on COMZONE variable](https://eig.org/the-uneven-geography-of-remote-work/) (Commuter Zones)

[Interactive ESRI Map of all PUMA outlines](https://univofillinois.maps.arcgis.com/apps/mapviewer/index.html?layers=71eb4ef236ca42c4b577a0a105e790e2)

[Article on calculating mean income for groups of geographies with ACS data](https://atcoordinates.info/2019/05/13/calculating-mean-income-for-groups-of-geographies-with-census-acs-data/)

```{r stateworkedin}
# State worked in:
#0=NA, 17=Illinois



# ipums_var_desc(data, PWSTATE2)

data <- data %>% 
  mutate(PWSTATE2_clean = as_factor(lbl_na_if(PWSTATE2, ~.val %in% c(0))))

data %>% 
  group_by(PWSTATE2) %>%
  dplyr::summarize(n=sum(PERWT)) %>% #number of people that match that observation
  mutate(pct = n/sum(n)) %>% 
  arrange(desc(pct))
```
