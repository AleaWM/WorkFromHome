---
title: "Work From Home: Who Can and Who Does?"
subtitle: "Using 2021 1-Year ACS Data"

format: 
  docx:
    toc: true

# format:
#  html:
#    toc: true
#    toc_float: true
#    df-print: paged
---

# Getting Data

I combine the 2019 and 2021 datasets when creating new variables and then separate them by year again before creating the survey design object for each sample year.

```{r setup, warning=FALSE, message=FALSE, include=FALSE}

library(scales)
library(reldist)
library(pollster)
library(labelled)
library(weights)
library(tigris)
library(ipumsr)
library(srvyr)
library(survey)
library(tidyverse)
library(naniar)
library(gmodels)
library(gtsummary)

knitr::opts_chunk$set(warning=FALSE, message=FALSE)
```

## ACS Survey Data Notes

IPUMS [link for Survey package](https://usa.ipums.org/usa/repwt.shtml)

Survey questions for EMPSTAT & LABFORCE:

1.  Last week, did this person work for pay at a job or business? (Yes or no) -- Yes becomes coded as EMPSTAT = 1-Employed.
2.  Last week, did this person do ANY work for pay, even as little as one hour?(Yes or no) -- Yes becomes coded as LABFORCE = 2-Yes in the labor force.

Survey questions for INCEARN:

1.  INCEARN = INCWAGE + INCBUS00
    -   Total amount earned in last 12 months: Wages, salary, commissions, bonuses, tips. \[Yes --\> \_\_\_\_\_\_ \] is coded as INCWAGE value.

    -   INCEARN includes self-employment income, INCWAGE does not.

        -   INCWAGE does not include Farming income and self-employment income, but INCEARN does.

`usa_00011.xml` and `usa_00011.dat.gz` are the same as Box files named `IL_2021_1yr_ACS.dat.gz` and `IL_2021_1yr_ACS_datDDI.xml`

> original xml file references the file name that it is called in the download. Either change the XML file to reference the correct .dat.gz files OR just keep track of which extracts are the same as the box file names.

```{r message=FALSE, warning = FALSE}
# old version with less variables:
#ddi <- read_ipums_ddi("usa_00009.xml") # 45 variables
#data <- read_ipums_micro(ddi) # 126623 observations before any filtering

# larger version with 147 variables. uses same file as Box file named "IL_2021_1yr_ACS.dat.gz and IL_2021_1yr_ACS_datDDI.xml
ddi <- read_ipums_ddi("usa_00011.xml") # downloaded April 10 2023
data2021 <- read_ipums_micro(ddi) # 126623 observations before any filtering
data2021 <- data2021 %>% select(YEAR, INCEARN, INCWAGE, INCTOT, TRANWORK, OCCSOC, CLASSWKR, EMPSTAT, LABFORCE, PERWT, COUNTYFIP, PUMA, PWSTATE2, AGE, STRATA, CLUSTER, RACE, HISPAN, SEX, CIHISPEED, CINETHH, MULTGEN, NCHILD, NCHLT5, MARST, FERTYR, EDUC, DEGFIELD )

# same sample but with 150+ variables. 
# NEED TO CHANGE XML file that referneces the data file. currently says usa_00011.dat.gz so these two lines of code do not work. 

ddi <- read_ipums_ddi("C:/Users/aleaw/Box/Fiscal Futures/FY22_Working/WFH/Data/IL_2019_1yearACS_datDDI.xml") # downloaded April 10 2023
data2019 <- read_ipums_micro(ddi) # 126623 observations before any filtering
data2019 <- data2019 %>% select(YEAR, INCEARN, INCWAGE, INCTOT, TRANWORK, OCCSOC, CLASSWKR, EMPSTAT, LABFORCE, PERWT, COUNTYFIP, PUMA, PWSTATE2, AGE, STRATA, CLUSTER, RACE, HISPAN, SEX, CIHISPEED, CINETHH, MULTGEN, NCHILD, NCHLT5, MARST, FERTYR, EDUC, DEGFIELD )

data <- rbind(data2019, data2021) #125,007 observations before any filtering. 


# replaces 0 with NA for variables listed. Allows topline to calculate "Valid Percent" when it recognizes missing values

data <- data %>% replace_with_na(replace = list(
  EMPSTAT= c(0), 
  LABFORCE=c(0), 
  CLASSWKR = c(0),
  OCCSOC = c(0),
  CIHISPEED = c(0),
  CINETHH = c(0),
  TRANWORK = c("N/A","0"))) %>% 
  filter(LABFORCE == 2 & INCEARN > 0) # in labor force and 18 years old and up abd positive earned incomes. 


data <- data %>% mutate(age_cat = 
                              case_when(AGE < 24 ~ "16to24",
                                        AGE > 24 & AGE < 35 ~ "25to34",
                                        AGE > 34 & AGE < 45 ~ "35to44",
                                        AGE > 44 & AGE < 55 ~ "45to54",
                                        AGE > 54 & AGE < 65 ~ "55to64",
                                        AGE > 64 ~ "65+"))

data <-  data %>% mutate(white = if_else(RACE ==1, 1, 0),
         black = if_else(RACE ==2, 1, 0), 
         asian = if_else(RACE %in% c(4,5,6), 1, 0),
         otherrace = if_else(RACE %in% c(3,7,8,9),1,0)) %>%
  group_by(COUNTYFIP,PUMA) %>%
  mutate(pct_white = sum(white)/n(),
         pct_black = sum(black)/n()) %>% 
  ungroup() %>%
  mutate(race_cat = case_when(
    RACE ==1~"White",
    RACE ==2 ~ "Black", 
    RACE %in% c(4,5,6)~"Asian",
    RACE %in% c(3,7,8,9)~"Other"))
table(data$race_cat)
## numbers used for income breaks are calculated in Income Deciles section. 
# created now so that the variable exists in the joined dataset before creating the survey design object

data <- data %>% 
  mutate(incdecile_w = case_when(
    INCEARN < 8000 ~ 1, 
    INCEARN >= 8000 & INCEARN < 18000 ~ 2,
    INCEARN >= 18000 & INCEARN < 26000 ~ 3,
    INCEARN >= 26000 & INCEARN < 35000 ~ 4,
    INCEARN >= 35000 & INCEARN < 43000 ~ 5,
    INCEARN >= 43000 & INCEARN < 54000 ~ 6,
    INCEARN >= 54000 & INCEARN < 68000 ~ 7,
    INCEARN >= 68000 & INCEARN < 85000 ~ 8,
    INCEARN >= 85000 & INCEARN < 120000 ~ 9,
    INCEARN >= 120000 ~ 10)
  ) %>%
  ## Padding FIPS code for merging with spatial geometry later
  mutate(county_pop_type = if_else(COUNTYFIP==0, 
                                   "Rural Counties", "Urban Counties")) %>%
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))



rm(ddi)
rm(data2019)
rm(data2021)
```

# Descriptive Statistics

251630 observations originally in ACS 2021 and 2019 1-year samples.

123,753 observations after removing those not in the labor force and with earned incomes less than or equal to zero.

::: {.callout-warning appearance="simple" icon="false"}
Note: Dropping groups of people using filter() from the sample will change the standard errors of estimates since it changes the sample size. Use the survey() or svy() command to drop subsets of people (like if we wanted to filter age groups). Google what commands to use to drop observations without impacting standard errors.
:::

```{r create-didwfh}
data <- data %>% 
  mutate(did_wfh = if_else(TRANWORK==80, 1, 0)) # 1 = wfh, 0 = did not wfh

data <- data %>% 
  mutate(
    did_wfh_labels = ifelse(did_wfh == 1, "Did WFH", "Did not WFH"),
    has_incearn = ifelse(INCEARN > 0, 1, 0), ## has earned income = 1
    has_occsoc = ifelse(OCCSOC > 0, 1, 0),# has occupation = 1
    has_incearn_labels = ifelse(INCEARN > 0, "Has EarnInc", "No IncData"), ## has earned income = 1
    has_occsoc_labels = ifelse(OCCSOC > 0, "Has Occ", "No Occ") ## OCCSOC code greater than zero coded as 1
    )


table(data$did_wfh, data$YEAR)


data %>% 
  group_by(YEAR, did_wfh) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weighted = round(weightedcount/sum(weightedcount), digits = 3),
         pct_noweight = round(unweightedcount/sum(unweightedcount), digits = 3))

#valid percent
data %>% filter(YEAR == 2019) %>%
topline(did_wfh, weight = PERWT)

data %>% filter(YEAR == 2021) %>%
topline(did_wfh, weight = PERWT)

```

18.2% of Illinois workers worked at home. 76.3% went to work using some form of transportation, 5.5% of observations were missing values.

-   **Valid percent:** 19.2% of observations with responses did WFH and 80.8% of observations with responses did not WFH. **This is the statistic we would use**

```{r could-wfh}
table(data$did_wfh_labels, data$YEAR)


telework <- read_csv("teleworkable_AWM.csv")
joined <- left_join(data, telework, by = c("OCCSOC" = "occ_codes"))

#table(joined$teleworkable)
# mostly 0's and 1's.
#hist(joined$teleworkable)

joined <- joined %>% 
  mutate(CanWorkFromHome = case_when(
  teleworkable == 0 ~ "No WFH",
  teleworkable < 1 ~ "Some WFH",
  teleworkable == 1 ~ "Can WFH",
  TRUE ~ "Check Me")) %>% 
  filter(has_incearn == 1 & LABFORCE == 2) 



```

### Survey Design

There are three different versions of the data: dstrata has both 2019 and 2021 data together (combined using rbind() above.) Using this combined design object makes some graphs easier, but I think it changes any standard errors used in estimate. I also made the 2019 and 2021 design strata from the the separate survey data. They all should have the same variables.

> After comparing the 2021 5-year sample, it is possible to just use that 5-year sample download and use only the 2019 and 2021 years of observations. This automatically adjusts the dollar amounts to 2021 dollars. It is also possible to use Pre-COVID and post-COVID years to have even more observations. (pre-covid would be 2017,2018, and 2019, post-covid would be 2020, 2021)

Deciles were created from the strata in different ways below. Depending on age ranges kept, deciles shift slightly.

2019 Strata by itself:\
4 9000 17000 25000 32000 40000 50000 63000 80000 114000 933000

2019 Strata from the rbind() combo dataframe and then filtered out only 2019 data: MATCHES:\
4 9000 17000 25000 32000 40000 50000 63000 80000 114000. Max = 933000

2019 Strata income decile breaks (using the 2021 5-year extract):\
4 9538 18016 26494 33912 42390 52988 66765 84781 121873 988757.\
**Already adjusted for inflation??????**

-   9000, 9400, 25000, 32000, 40000, 50000, 63000, 80000, 1140000, 949000

-   8000, 18000, 26000, 35000, 43000, 54000, 68000, 85000, 120000

    \

::: {.callout-warning appearance="simple" icon="false"}
survey::svyquantile() uses the survey design to calculate deciles. These deciles that are created are slightly different than the deciles assigned using ntile(). I trust survey::svyquantile more because I know it applies the weights to observations when creating the deciles for earned income.
:::

::: {.callout-important appearance="minimal" icon="false"}
the ntile() decile variable is what is used to graph all decile images and for all income decile tables/calculations. ~~Find a way to apply the summarized version of the svyquantiles as a new variable in the dstrata datasets.~~ - Done.

`incdecile_w` is made using the breaks returned from the svyquantile command.

-   now use this variable in graphs? or create the summary tables using weights and then pass that to the graph commands.
:::

```{r survey-design, message = FALSE, warning=FALSE}
#as_survey() from srvyr package

## both years together: calculations using this will have incorrect standard errors
# might be easier sometimes to graph together. Maybe. 
dstrata <- survey::svydesign(id = ~CLUSTER, strata = ~STRATA, weights = ~PERWT, data = joined) %>% 
  as_survey() %>%
  mutate(decile = ntile(INCEARN, 10))



# 2019 data turned into survey item
dstrata2019 <- joined %>% filter(YEAR==2019) 
dstrata2019 <- survey::svydesign(id = ~CLUSTER, strata = ~STRATA, 
                                 weights = ~PERWT, data = dstrata2019) %>% 
  as_survey() %>% 
  mutate(decile = ntile(INCEARN, 10))


dstrata2021 <- joined %>% filter(YEAR==2021) 

dstrata2021 <- survey::svydesign(id = ~CLUSTER, strata = ~STRATA, weights = ~PERWT, data = dstrata2021) %>% as_survey() %>%
  mutate(decile = ntile(INCEARN, 10))

# deciles using ntile(). Not weighted!!  Close to income deciles from weighted suvey design though.




```

### Creating Income Deciles

```{r}

# svyquantile shows the breaks for the quantiles. hypothetically uses weights of observations for calculation of deciles.
# equal number of people should be in each decile after weights are applied 
inc_quantiles <- survey::svyquantile(~INCEARN, design=dstrata2019, 
    quantiles = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) , na.rm=TRUE,  ci = FALSE  )
# $INCEARN for 2019
#[1,] 4 8000 16000 24000 30900 40000 50000 62000 80000 113000 933000
# values not adjusted to 2021 values.
inc_quantiles


inc_quantiles <-survey::svyquantile(~INCEARN, design=dstrata2021, 
                    quantiles = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) ,
                    na.rm=TRUE, ci = FALSE  )
inc_quantiles
# $INCEARN
# [1,] 4 7200 16000 25000 34000 42000 52000 67000 85000 120000 949000



breaks2019 <- c(7200, 16000, 25000, 34000, 42000, 52000, 67000, 85000, 120000)

breaks2019adjusted <- c(8478, 16956, 25434, 32853, 42390, 52988, 65705, 84781, 120813) 
# from 2021 5 year sample and filtered for just 2019. 
# already adjusted for inflation.
# included for comparison and to decide to use 5 year ACS or 2019 and 2021 1 year ACS

breaks2021 <- c(8000, 18000, 26000, 35000, 43000, 54000, 68000, 85000, 120000)

# Code done above when creating variables in beginning chunks. 
# joined <- joined %>% 
#   mutate(incdecile_w = case_when(
#     INCEARN < 8000 ~ 1, 
#     INCEARN >= 8000 & INCEARN < 18000 ~ 2,
#     INCEARN >= 18000 & INCEARN < 26000 ~ 3,
#     INCEARN >= 26000 & INCEARN < 35000 ~ 4,
#     INCEARN >= 35000 & INCEARN < 43000 ~ 5,
#     INCEARN >= 43000 & INCEARN < 54000 ~ 6,
#     INCEARN >= 54000 & INCEARN < 68000 ~ 7,
#     INCEARN >= 68000 & INCEARN < 85000 ~ 8,
#     INCEARN >= 85000 & INCEARN < 120000 ~ 9,
#     INCEARN >= 120000 ~ 10)
#   )
# number of observations in each decile after weights used for creating the income deciles
#table(joined$incdecile_w)

# no major differnce between years in who COULD work from home based on teleworkable codes. Makes sense. 
# ggplot(joined, aes(teleworkable, weight = PERWT)) +
# geom_histogram()+facet_wrap(~YEAR)



table <- svytable(~YEAR+incdecile_w+did_wfh_labels,  design = dstrata) # proportion of each respondants sex in sample

table <- table %>% 
  as_tibble() %>% 
  group_by(YEAR,incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  filter(did_wfh_labels == "Did WFH")

table # has proportions calculated out of TOTAl for both years

table %>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, fill = YEAR, group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(stat="identity", position = "dodge")+
  #geom_col(stat = "identity", position = "stack") +   # scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+

 # facet_wrap(~YEAR)+
   coord_flip()+
    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_dodge(width = 0.8), hjust = 1.1,
              size = 4) + 
  labs(title ="All Ages (16+): Percent of each income decile that worked from home",
  subtitle = "2019 vs 2021",
       caption = "ACS 1 year samples for 2019 and 2021. Working from home based on TRANWORK question on commuting.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers working from home") + 
 theme(legend.position = "bottom", legend.title = element_blank())+
  theme_classic()+
  scale_y_continuous(labels = scales::percent)



decile_labels <- c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")

```

```{r eval=FALSE, include=FALSE}

table18up<-subset(dstrata,AGE>17)

table18up <- svytable(~YEAR+incdecile_w+did_wfh_labels,  design = table18up) # proportion of each respondants sex in sample


table18up <- table18up %>% 
  as_tibble() %>% 
  group_by(YEAR,incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  filter(did_wfh_labels == "Did WFH")

table18up # has proportions calculated out of TOTAl for both years

table18up %>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, fill = YEAR, group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(stat="identity", position = "dodge")+
  #geom_col(stat = "identity", position = "stack") +   # scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+

 # facet_wrap(~YEAR)+
   coord_flip()+
    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_dodge(width = 0.8), hjust = 1.1,
              size = 4) + 
  labs(title ="Ages 18+: Percent of each income decile that worked from home",
  subtitle = "2019 vs 2021",
       caption = "ACS 1 year samples for 2019 and 2021. Working from home based on TRANWORK question on commuting.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers working from home") + 
 theme(legend.position = "bottom", legend.title = element_blank())+
  theme_classic()+
  scale_y_continuous(labels = scales::percent)



table25up<-subset(dstrata, AGE>24)
table25up <- svytable(~YEAR+incdecile_w+did_wfh_labels,  design = table25up) # proportion of each respondants sex in sample


table25up <- table25up %>% 
  as_tibble() %>% 
  group_by(YEAR,incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  filter(did_wfh_labels == "Did WFH")

table25up # has proportions calculated out of TOTAl for both years

table25up %>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, fill = YEAR, group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(stat="identity", position = "dodge")+
  #geom_col(stat = "identity", position = "stack") +   # scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+

 # facet_wrap(~YEAR)+
   coord_flip()+
    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_dodge(width = 0.8), hjust = 1.1,
              size = 4) + 
  labs(title ="Ages 25+: Percent of each income decile that worked from home",
  subtitle = "2019 vs 2021",
       caption = "ACS 1 year samples for 2019 and 2021. Working from home based on TRANWORK question on commuting.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers working from home") + 
 theme(legend.position = "bottom", legend.title = element_blank())+
  theme_classic()+
  scale_y_continuous(labels = scales::percent)
```

```{r svy-tables}
# joined %>% filter(YEAR == 2019)  %>% 
#   tbl_summary(include = c(-OCCSOC, -PUMA),
#               statistic = list(all_continuous() ~"{mean} ({sd})"))


# weights_2019table <- full_tidy_2019 %>% 
#   tbl_svysummary(include = c(INCEARN, INCWAGE, TRANWORK, EMPSTAT, LABFORCE, SEX, AGE, RACE, CLASSWKR))


# design2019 %>% 
#   tbl_svysummary(include = c(-OCCSOC, -PUMA))
# 
# design2021 %>% 
#   tbl_svysummary(include = c(-OCCSOC, -PUMA))
# 

# shows the breaks for the quantiles. hypothetically uses weights of observations for calculation of deciles.
# equal number of people should be in each decile after weights. 


svyby(~did_wfh, by = ~RACE, design = dstrata2021, FUN = svymean, na.rm=TRUE)
svyby(~INCEARN, by = ~RACE, design = dstrata2021, FUN = svymean, na.rm=TRUE)


incomebysex<- dstrata2021 %>% 
  mutate(INCEARN = as.numeric(INCEARN) )%>%
  svyby(formula = ~ INCEARN, by = ~SEX, 
      FUN = svyquantile, 
      na.rm=TRUE,
        quantiles  = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9) )

incomebysex %>% 
  pivot_longer(cols = c(-SEX),names_to = "columns", values_to = "values") %>% 
  mutate(values = round(values, digits =2))


incomebywfh <- dstrata2021 %>% 
  mutate(INCEARN = as.numeric(INCEARN) )%>%
  svyby(formula = ~INCEARN, by = ~did_wfh_labels,# design = dstrata2021,
      FUN = svyquantile, 
      na.rm=TRUE,
     keep.names = FALSE,
        quantiles  = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9) )

incomebywfh
## ^ Income deciles by wfh status

```

### Gender and Working from home

20.5% of those in the labor force worked from home in 2021.

-   10.7% were women, 9.8% were men.

52.6% of those in the labor force were Men, 47.4% were Women.

> Is this when t-tests are supposed to be used? Comparing two groups but are they actually statistically significantly different?

```{r}

round(prop.table(svytable(~did_wfh_labels, design=dstrata2019))*100,digits=2) 
round(prop.table(svytable(~did_wfh_labels, design=dstrata2021))*100,digits=2) 


# unweighted attempt at summary table using "data" dataframe
table <- data %>% 
 # filter(did_wfh==1) %>%  
  mutate(total = n())  %>%
  group_by(YEAR, did_wfh, SEX) %>% 
  dplyr::summarize(n_unweighted=n()) %>% 
  mutate(Prop = n_unweighted/sum(n_unweighted))
# unweighted sex proportions each year
table 

table <- svytable(~SEX+YEAR+did_wfh_labels, design = dstrata) 
# proportion of each respondant's sex and if they worked from home for each year in sample
table <- table %>% 
  as_tibble() %>% 
  group_by(YEAR, SEX)%>% # grouped by Year and Sex!!
  mutate(Prop =round(n/sum(n), digits=4))
table

# # attempt 1, not what I wanted
# table %>% ggplot(aes(did_wfh_labels, y=Prop, group = YEAR, fill = YEAR)) + 
#   geom_col(stat = "identity", position = "dodge") +    
#   geom_text(aes(label = scales::percent(Prop)), position = position_dodge(width = .9), size=3,vjust=1.1) + 
#   theme_classic() + theme(legend.position = "bottom", legend.title = element_blank())+
#   labs(title ="First Attempt at WFH graph for each Year",
#        x = "", y = "",
#       caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") + scale_y_continuous(labels = scales::percent)


# attempt 2
table %>% ggplot(aes(factor(SEX, labels = c("Male", "Female")), y=Prop, fill = did_wfh_labels, group = YEAR)) + 
  geom_col(stat = "identity", position = "stack") +
  facet_wrap(~YEAR)+
    geom_text(aes(label = scales::percent(Prop)), position = position_fill(vjust=.5), size=3) + 
  theme_classic() + theme(legend.position = "bottom", legend.title = element_blank())+
  labs(title ="Percent working from home by Sex: 2019 vs 2021",
       x = "", y = "",
      caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") + scale_y_continuous(labels = scales::percent)


#compare combined strata survey design to single year survey objects:
# MATCHES
# table <- svytable(~SEX+did_wfh, design = dstrata2019) # proportion of each respondants sex in sample
# table <- table %>% 
#   as_tibble() %>% 
#   group_by(SEX) %>%
#   mutate(Prop = round(n/sum(n), digits=4))
# table
# 
# table <- svytable(~SEX+did_wfh, design = dstrata2021, 
#                   round= TRUE) 
# table <- table %>% 
#   as_tibble() %>% group_by(SEX) %>%
#   mutate(Prop = round(n/sum(n), digits=4))
# table


```

```{r}

round(prop.table(svytable(~has_occsoc+SEX, design=dstrata2019))*100,digits=2)
# slight drop in women in the workforce (technically women with occupations). 
round(prop.table(svytable(~has_occsoc+SEX, design=dstrata2021))*100,digits=2)


CrossTable(data$SEX, data$YEAR)
xtabs(~SEX+YEAR, data = data) %>% summary()

xtabs(~did_wfh+SEX+YEAR, data = data) %>% summary()




## Most interesting change: 
round(prop.table(svytable(~SEX+did_wfh_labels, design=dstrata2019))*100,digits=2) 
# 1 is Male, 2 is female
round(prop.table(svytable(~SEX+did_wfh_labels, design=dstrata2021))*100,digits=2) 


# Chi square goodness of fit

# practice test to see if sex is 52% male and 48% female. For both years. 
chisq.test(table(joined$SEX), p = c(52, 48)/100)
# can't reject the null, so the sample represents the population if the known population is 52% male and 48% female.

svytotal(x = ~interaction(SEX, did_wfh_labels), design = dstrata2021, na.rm=TRUE)
svytotal(x = ~interaction(SEX, did_wfh_labels), design = dstrata2019, na.rm=TRUE)


#svymean(x = ~interaction(INCEARN, EMPSTAT), design = dstrata2021, na.rm=TRUE)
#svymean(x = ~interaction(INCEARN, LABFORCE), design = dstrata2021, na.rm=TRUE)


svyttest(formula = INCEARN~SEX, design = dstrata2021)
svyttest(formula = INCEARN~did_wfh_labels, design = dstrata2021)

```

Null hypothesis: There is no difference in working from home associated with sex.

Alt. Hyp: Working from home is associated with sex.

```{r}
svychisq(~SEX+did_wfh_labels, design = dstrata2021, statistic = "Chisq")
```

```{r graphing-errorbars}
output <- svyby(formula = ~INCEARN, by = ~SEX, design = dstrata2021,
      FUN = svymean, na.rm=TRUE)
  
out_col <- mutate(output, 
                  lower = INCEARN - 2*se, 
                  upper = INCEARN + 2*se)

ggplot(out_col, aes(SEX, INCEARN, ymin=lower, ymax=upper)) + geom_col() +geom_errorbar(width = 0.7) + labs( y = "Average Earned Income", x = "Sex")+ scale_x_discrete(limits = c("Male", "Female") )


```

### Graphing Income Deciles

> percent includes both years for combined strata.

```{r graphing-inc-deciles-notweighted, include=FALSE, eval=FALSE}

#min= -8000, max=949000 for INCEARN 

#code from above

dstrata %>% group_by(YEAR) %>% summarize(count = n())


dstrata %>%
  as_data_frame() %>%
  dplyr::group_by(YEAR)%>% 
 # mutate(yrcount=)

  filter(did_wfh==1) %>%
  ggplot(aes(x=decile,
             y = (..count..)/(sum(..count..))*10,

           fill=factor(YEAR)
             )) + 
  geom_bar(position=position_dodge())+
  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))  +
#    scale_y_discrete(limits = c("2019", "2021"))  +
  #scale_y_continuous(labels=percent) +
  labs(x="",y="",
       title = "Using dstrata dataframe: % of workers who worked at home by income decile in 2019 and 2021",
       subtitle = "PERCENT IS CALCULATED FROM TOTAL OBS FOR BOTH YEARS: FIX")+
  coord_flip()


# dstrata2019 %>%
#   as_data_frame() %>%
#   filter(did_wfh_labels != "NA") %>%
#   ggplot(aes(x=decile, 
#              y = (..count..)/(sum(..count..))*10,
#              fill=did_wfh_labels
#              )) + 
#   geom_bar(position="fill")+
#   theme(legend.position = "bottom", legend.title = element_blank()) +
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))  +
#   labs(x="",y="",
#        title = "2019 Data: Who DID work from home?",
#        subtitle = "Percent of WFH workers by income decile")+
#   coord_flip()

dstrata2021 %>%
  as_data_frame() %>%
  filter(did_wfh_labels != "NA") %>%
  ggplot(aes(x=decile, 
             y = (..count..)/(sum(..count..))*10,
             fill=did_wfh_labels
             )) + 
  geom_bar(position="fill")+
  theme(legend.position = "bottom", legend.title = element_blank()) +
  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))  +
  labs(x="",y="",
       title = "2021: Who DID work from home?",
       subtitle = "Percent of WFH workers by income decile")+
  coord_flip()


dstrata %>%
  as_data_frame() %>%
  filter(YEAR == 2019) %>%
  count(did_wfh, decile) %>%
  mutate(pct = round(n/sum(n)*1000, 1))%>%
  filter(did_wfh == 1)%>%
  #filter(did_wfh == "Can WFH") %>%
  #group_by(decile)%>%
  #summarize(count2 = n()) %>%
  ungroup()%>%
  ggplot(aes(x=decile,
            # group = YEAR,
             y = pct,
             )) + 
  geom_col() +
 # geom_col(aes(fill=YEAR)) +
  coord_flip()+
    theme(legend.position = "bottom") +

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
  geom_text(aes(label=paste0(pct,"%")), hjust=1.3)+
  labs(x="",y="% Worked at Home", title = "Individuals with higher income were more able to work from home",
       subtitle = "2019 ACS 1-year Sample with incorrectly weighted deciles",
       caption = "Did work from home is based on ACS variable TRANWORK.
       Delete this graph eventually. Keeping it for code comparison for now.")+
  theme_minimal()+
  theme(legend.position = "none")

# CanWFH2019 <- dstrata2019 %>%
# as_data_frame() %>%
#  # mutate(total = n()) %>%
#   filter(CanWorkFromHome != "Check Me") %>%
#   ggplot(aes(x=decile, 
#              y = (..count..)/sum(..count..)*10,
#              fill = CanWorkFromHome)) + 
#   geom_bar( position = "dodge") +
#   #coord_flip()+
#     theme(legend.position = "bottom", legend.title = element_blank()) +
# 
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
#   scale_y_continuous(labels=scales::percent) +
#   labs(x="",y="", title = "2019 Data: Who Could work from home?", subtitle = "Based on Job Characteristics")
# 
# CanWFH2019
# 
# 
# 
# CanWFH2021 <- dstrata2021 %>%
# as_data_frame() %>%
#  # mutate(total = n()) %>%
#   filter(CanWorkFromHome != "Check Me") %>%
#   ggplot(aes(x=decile, 
#              y = (..count..)/sum(..count..)*10,
#              fill = CanWorkFromHome)) + 
#   geom_bar( position = "dodge") +
#   #coord_flip()+
#     theme(legend.position = "bottom", legend.title = element_blank()) +
# 
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
#   scale_y_continuous(labels=scales::percent) +
#   labs(x="",y="", title = "2021 Data: Who Could work from home?", subtitle = "Based on Job Characteristics")
# 
# CanWFH2021

# dstrata2019 %>%
# as_data_frame() %>%
#  # mutate(total = n()) %>%
#   filter(CanWorkFromHome != "Check Me") %>%
#   ggplot(aes(x=decile, 
#              y = (..count..)/sum(..count..)*10,
#              fill = YEAR)) + 
#   geom_bar(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))),position = "stack") +
#   #coord_flip()+
#     theme(legend.position = "bottom", legend.title = element_blank()) +
# 
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
#   scale_y_continuous(labels=scales::percent) +
#   labs(x="",y="", title = "2019 Data")+coord_flip()


# dstrata2021 %>%
# as_data_frame() %>%
#  # mutate(total = n()) %>%
#   filter(CanWorkFromHome != "Check Me") %>%
#   ggplot(aes(x=decile, 
#              y = (..count..)/sum(..count..)*10,
#              fill = YEAR)) + 
#   geom_bar(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))),position = "stack") +
#   #coord_flip()+
#     theme(legend.position = "bottom", legend.title = element_blank()) +
# 
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
#   scale_y_continuous(labels=scales::percent) +
#   labs(x="",y="", title = "2021 Data")+
#   coord_flip()



```

```{r include=FALSE, eval=FALSE}


dstrata2019 %>%
as_data_frame() %>%
  filter(CanWorkFromHome != "Check Me") %>%
  count(decile, CanWorkFromHome) %>%
  mutate(pct = round(n/sum(n/10), 3)*100)%>%
  ggplot(aes(x=decile,  y = n,
         fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))
         )) + 
  geom_bar( stat = "identity") +
  coord_flip()+
  geom_text(aes(label=paste0(pct, "%")), 
            position = position_stack(vjust=0.5), size=2.5)+
    theme(legend.position = "bottom", legend.title = element_blank()) +

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
    guides(fill = guide_legend(reverse = TRUE))+

  #scale_y_continuous(labels=scales::percent) +
  labs(x="Earned Income Deciles", y="# Survey Responses", 
       title = "Ability to work from home based on occupational characteristics",
       subtitle = "HAS COUNTS on x axis: FIX THAT",
       caption = "Occupation data from ACS 1-year 2019 sample.")



dstrata2021 %>%
as_data_frame() %>%
  filter(CanWorkFromHome != "Check Me") %>%
  ggplot(aes(x=decile, 
        fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))
         )) + 
  geom_bar( position = "fill") +
  coord_flip()+
  geom_text( aes(label=paste0(signif(..count.. / tapply(..count.., ..x.., sum)[as.character(..x..)], digits=3)*100,"%")),
    stat="count", position = position_fill(vjust=0.5), size=3) +
    theme(legend.position = "bottom", legend.title = element_blank()) +

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
  guides(fill = guide_legend(reverse = TRUE))+
  #scale_y_continuous(labels=scales::percent) +
  labs(x="Earned Income Deciles", y="% Survey Responses", 
       title = "Ability to work from home based on occupational characteristics",
       caption = "Occupation data from ACS 1-year 2021 sample.") 


  
dstrata2021 %>%
as_data_frame() %>%
  filter(CanWorkFromHome != "Check Me") %>%
  ggplot(aes(x=decile, 
        fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))
         )) + 
  geom_bar(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))), position = "fill") +
  coord_flip()+
  geom_text( aes(label=paste0(signif(..count.. / tapply(..count.., ..x.., sum)[as.character(..x..)], digits=3)*100,"%")),
    stat="count", position = position_fill(vjust=0.5), size=3) +
    theme(legend.position = "bottom", legend.title = element_blank()) +

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
  guides(fill = guide_legend(reverse = TRUE))+
  #scale_y_continuous(labels=scales::percent) +
  labs(x="Earned Income Deciles", y="% Survey Responses", 
       title = "Ability to work from home based on occupational characteristics",
       caption = "Occupation data from ACS 1-year 2021 sample.")
 
```

```{r can-WFH-graphs}
#| code-fold: true


table <- svytable(~YEAR+incdecile_w+CanWorkFromHome,  design = dstrata) # proportion of each respondants sex in sample

table <- table %>% 
  as_tibble() %>% 
  group_by(YEAR, incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  mutate(CanWorkFromHome = factor(CanWorkFromHome, levels = c('No WFH', 'Some WFH',  'Can WFH')))

table 

table[rev(order(table$CanWorkFromHome)),]%>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), 
                    labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, 
            # fill = CanWorkFromHome,
            fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")), 
             group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")),stat="identity", position = "stack"))+
   coord_flip()+

    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_fill(vjust =.5), size = 2) + 
    guides(fill = guide_legend(reverse = TRUE))+

  labs(title ="Percent of each income decile that could potentially work from home",
       subtitle = "2019 vs 2021",
       caption = " Based on occupation codes from ACS 1 year samples for 2019 and 2021. Teleworkable coding based on Dingel & Neimen 2020.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers that can work from home based on occupation characteristics") +   theme_classic()+

 theme(legend.position = "bottom", legend.title = element_blank())+
  scale_y_continuous(labels = scales::percent) +   facet_wrap(~YEAR)

  
 



```

```{r agegroup-comparison, eval=FALSE, include=FALSE}
# Bottom 10% of earners change the most depending on the age groups incuded in sample. 

table <- svytable(~YEAR+incdecile_w+CanWorkFromHome,  design = dstrata) # proportion of each respondants sex in sample

table <- table %>% 
  as_tibble() %>% 
  group_by(YEAR, incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  mutate(CanWorkFromHome = factor(CanWorkFromHome, levels = c('No WFH', 'Some WFH',  'Can WFH')))

table[rev(order(table$CanWorkFromHome)),]%>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), 
                    labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, 
            # fill = CanWorkFromHome,
            fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")), 
             group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")),stat="identity", position = "stack"))+
   coord_flip()+

    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_fill(vjust =.5), size = 2) + 
    guides(fill = guide_legend(reverse = TRUE))+

  labs(title ="All Ages (16+): Percent of each income decile that could potentially work from home",
       subtitle = "2019 vs 2021",
       caption = " Based on occupation codes from ACS 1 year samples for 2019 and 2021. Teleworkable coding based on Dingel & Neimen 2020.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers that can work from home based on occupation characteristics") +   theme_classic()+

 theme(legend.position = "bottom", legend.title = element_blank())+
  scale_y_continuous(labels = scales::percent) +   facet_wrap(~YEAR)




table18up<-subset(dstrata,AGE>17)

table18up <- svytable(~YEAR+incdecile_w+CanWorkFromHome,  design = table18up) # proportion of each respondants sex in sample


table18up <- table18up %>% 
  as_tibble() %>% 
  group_by(YEAR, incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  mutate(CanWorkFromHome = factor(CanWorkFromHome, levels = c('No WFH', 'Some WFH',  'Can WFH')))


table18up[rev(order(table$CanWorkFromHome)),]%>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), 
                    labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, 
            # fill = CanWorkFromHome,
            fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")), 
             group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")),stat="identity", position = "stack"))+
   coord_flip()+

    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_fill(vjust =.5), size = 2) + 
    guides(fill = guide_legend(reverse = TRUE))+

  labs(title ="18&up: Percent of each income decile that could potentially work from home",
       subtitle = "2019 vs 2021",
       caption = " Based on occupation codes from ACS 1 year samples for 2019 and 2021. Teleworkable coding based on Dingel & Neimen 2020.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers that can work from home based on occupation characteristics") +   theme_classic()+

 theme(legend.position = "bottom", legend.title = element_blank())+
  scale_y_continuous(labels = scales::percent) +   facet_wrap(~YEAR)




table25up<-subset(dstrata,AGE>24)

table25up <- svytable(~YEAR+incdecile_w+CanWorkFromHome,  design = table25up) # proportion of each respondants sex in sample


table25up <- table25up %>% 
  as_tibble() %>% 
  group_by(YEAR, incdecile_w)%>%
  mutate(Prop=round(n/sum(n), digits=3)) %>%
  mutate(CanWorkFromHome = factor(CanWorkFromHome, levels = c('No WFH', 'Some WFH',  'Can WFH')))

table25up[rev(order(table$CanWorkFromHome)),]%>%
  ggplot(aes(factor(incdecile_w, levels = c(1,2,3,4,5,6,7,8,9,10), 
                    labels = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%")), 
                     y=Prop, 
            # fill = CanWorkFromHome,
            fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")), 
             group = factor(YEAR, levels = "2021","2019"))) + 
  geom_col(aes(fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH")),stat="identity", position = "stack"))+
   coord_flip()+

    geom_text(aes(label = scales::percent(Prop, accuracy = 0.1L)), position = position_fill(vjust =.5), size = 2) + 
    guides(fill = guide_legend(reverse = TRUE))+

  labs(title ="25&up: Percent of each income decile that could potentially work from home",
       subtitle = "2019 vs 2021",
       caption = " Based on occupation codes from ACS 1 year samples for 2019 and 2021. Teleworkable coding based on Dingel & Neimen 2020.
       All workers in the labor force, all ages included.
       Income based on INCEARN for total earned income of survey respondents.", 
       x= "Income Deciles", 
       y = "Percent of workers that can work from home based on occupation characteristics") +   
  theme_classic()+
  theme(legend.position = "bottom", legend.title = element_blank())+
  scale_y_continuous(labels = scales::percent) +   
  facet_wrap(~YEAR)

  
```

```{r avginc-perdecile-graphs}
#| code-fold: TRUE

# summary(as.numeric(data$INCEARN))
# 
# # using decile made # of observations
# summary <- dstrata %>% 
#   group_by(YEAR,decile) %>% 
#   summarize(min = min(INCEARN),
#             max=max(INCEARN),
#             avg_income = mean(INCEARN),
#             average_income = survey_mean(INCEARN),
#             pop_represented = sum(PERWT),
#             obs_count = n())
# summary %>% 
#   ggplot(aes(x=decile, y=average_income, label=scales::dollar(average_income))) + 
#   geom_col()+
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
#   scale_y_continuous(labels = scales::dollar)+labs(x="",y="", title = "Average earned income for each income decile")+
#   geom_text(vjust = -0.5, size = 3)+
#   facet_wrap(~YEAR)
# 
# 
# 
# # with weighted deciles made from # of pop represented
# summary <- dstrata %>% 
#   group_by(YEAR, incdecile_w) %>% 
#   summarize(min = min(INCEARN),
#             max=max(INCEARN),
#             avg_income = mean(INCEARN),
#             average_income = survey_mean(INCEARN),
#             pop_represented = sum(PERWT),
#             obs_count = n())
# 
# summary %>% 
#   ggplot(aes(x=incdecile_w, y=average_income, label=scales::dollar(average_income))) + 
#   geom_col()+
#   scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
#   scale_y_continuous(labels = scales::dollar)+labs(x="",y="", title = "Average earned income for each income decile")+
#   geom_text(vjust = -0.5, size = 3)+
#   facet_wrap(~YEAR)




output <- svyby(formula = ~INCEARN, by = ~YEAR+incdecile_w, design = dstrata, 
      FUN = svymean, na.rm=TRUE)
  
out_col <- mutate(output, 
                  lower = INCEARN - 2*se, 
                  upper = INCEARN + 2*se)

ggplot(out_col, aes(incdecile_w, INCEARN, ymin=lower, ymax=upper)) + 
  geom_col(stat = "identity") +
  geom_errorbar(width = 0.7) + 
  facet_wrap(~YEAR) + 
  labs(title = "Average income earned for each decile of income earners", y = "Average Earned Income for each Income Decile", x = "Deciles of Income Earners", caption = "NOT adjusted for inflation")+ coord_flip() +
  scale_x_discrete(limits = decile_labels ) + 
 # ylim(0,250000)+
  scale_y_continuous(label = scales::dollar, limits = c(0,275000))+
   geom_text(aes(label = scales::dollar(INCEARN)), size=3, hjust=-.3)


```

```{r other-teleworkable-graphs}
#| include: FALSE


dstrata %>% filter(YEAR==2019) %>%
as_data_frame() %>%
  filter(CanWorkFromHome != "Check Me" & did_wfh_labels != "NA") %>%

  ggplot(aes(x=decile, 
        fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))
         )) + 
  geom_bar( position = "fill") +
  coord_flip()+
  geom_text( aes(label=paste0(signif(..count.. / tapply(..count.., ..x.., sum)[as.character(..x..)], digits=3)*100,"%")),
    stat="count", position = position_fill(vjust=0.5), size=3) +
    theme(legend.position = "bottom", legend.title = element_blank()) +

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
  guides(fill = guide_legend(reverse = TRUE))+
  #scale_y_continuous(labels=scales::percent) +
  labs(x="Earned Income Deciles", y="% Survey Responses", 
       title = "Ability to work from home based on occupational characteristics",
       caption = "Uses original decile variable instead of incdecile_w. 
       `decile` is based on # of observations. 
       `incdecile_w` should be based on population estimates.
       Occupation data from ACS 1-year 2019 sample.") 

dstrata %>% filter(YEAR==2021) %>%
as_data_frame() %>%
  filter(CanWorkFromHome != "Check Me" & did_wfh_labels != "NA") %>%

  ggplot(aes(x=decile, 
        fill = factor(CanWorkFromHome, levels = c("No WFH", "Some WFH",  "Can WFH"))
         )) + 
  geom_bar( position = "fill") +
  coord_flip()+
  geom_text( aes(label=paste0(signif(..count.. / tapply(..count.., ..x.., sum)[as.character(..x..)], digits=3)*100,"%")),
    stat="count", position = position_fill(vjust=0.5), size=3) +
    theme(legend.position = "bottom", legend.title = element_blank()) +

  scale_x_discrete(limits = c("Bottom 10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "Top 10%"))+
  guides(fill = guide_legend(reverse = TRUE))+
  #scale_y_continuous(labels=scales::percent) +
  labs(x="Earned Income Deciles", y="% Survey Responses", 
       title = "Ability to work from home based on occupational characteristics",
       caption = "Uses original decile variable instead of incdecile_w. 
       `decile` is based on # of observations. `incdecile_w` should be based on population estimates. 
       Occupation data from ACS 1-year 2021 sample.") 
```

```{r}
# data has 2019 and 2021 observatins TOGETHER
topline(data, did_wfh,  weight=PERWT)



# All members of the labor force could have said they either work from home (TRANWORK=80), go to work using some form of transportation, or didn't answer the question. 8.2% of the labor force did not answer the TRANWORK question and should not be included in calculations.
data %>% filter(YEAR == 2021) %>% crosstab(x=RACE, y=did_wfh_labels, weight = PERWT, pct_type = "row", unwt_n=TRUE, n=FALSE)  # matches Francis Total Row in Race output


data  %>% crosstab_3way(x=YEAR, y=did_wfh, z=race_cat, weight = PERWT)


```

```{r}
crosstab(data, x=LABFORCE, y=SEX, weight = PERWT, pct_type = "row", unwt_n=TRUE, n=FALSE) # matches Francis, 52% male, 48% female in laborforce

data %>% filter(YEAR ==2021) %>% crosstab(x=did_wfh_labels, y=SEX, weight = PERWT, pct_type = "row", unwt_n=TRUE, n=FALSE)

crosstab_3way(data, x=YEAR, y=did_wfh_labels, z=SEX, weight = PERWT, pct_type = "row", unwt_n=TRUE, n=FALSE)


```

```{r worker-descstats, eval=FALSE}
# Employment Status
table(data$EMPSTAT) # unweighted

data %>% 
  group_by(YEAR, as_factor(EMPSTAT)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))

# Labor Force
data %>% 
  group_by(YEAR, as_factor(LABFORCE)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))


# Class of Worker
data %>% 
  group_by(YEAR, as_factor(CLASSWKR)) %>%
  dplyr::summarize(weightedcount=sum(PERWT),
                   unweightedcount = n()) %>%  #weighted
  mutate(pct_weight = weightedcount/sum(weightedcount),
         pct_noweight = unweightedcount/sum(unweightedcount))



```

[***Unweighted***]{.underline} *-*

*EMPSTAT: 59,259 observations are employed, 4,194 unemployed observations, and 41,289 observations are not in the workforce (21,881 NAs)*

*LABFORCE: 63,453 are in labor force, 41,289 are not. (21,881 NAs)*

*CLASSWKR: Of these, 68,388 work for wages and 7183 people are self-employed. (51,052 NA)*

*`did_wfh`: 10,949 observations worked from home, 47,584 did not work from home. Based on TRANWORK variable: recoded as binary variable (either did wfh or did not wfh).*

[**Weighted**]{.underline} **-**

EMPSTAT: 6,102,522 people are employed (49%), 479,879 people are unemployed (3.8%), and 3,624,811 are not in the labor force (29%). There are 2,463,257 missing values; Same as LABFORCE.

LABFORCE: 6,582,401 people (52%) are in the labor force. 3,625,811 (28%) of people are not in the labor force. 2,463,257 (20%) of observations missing values.

-   employed and unemployed equal number of people in labor force - that's good

`did_wfh`: 19.2% did work from home and 80.8% did not work from home in Illinois (when not filtering for age or employment)

Location of primary workplace: 5.8 million people located in Illinois.

For the counties that can be identified in the data (populations \> 100,000 & \< 200,000. 1-Year ACS have minimum of 65,000 population), the census summary tables are close but not identical to the tables calculated with the ACS sample data. "In this way more densely populated areas, like Chicago and Cook County will contain many PUMAs within their boundaries, while multiple sparsely populated entire counties, e.g., Jackson, Perry, Franklin, and Williamson, will comprise one PUMA." - [IPUMS v other Geographies](https://iecam.illinois.edu/browse/about-public-use-microdata-areas-pumas#:~:text=What%20is%20a%20PUMA%3F,Community%20Survey%201%2Dyear%20estimates)

19 is Champaign, 31 is Cook, 37 is DeKalb, 43 is DuPage, 89 is Kane, 111 is McHenry, etc.

Economic Characteristics summary table: [link](https://data.census.gov/table?t=Employment&g=040XX00US17,17$0500000&tid=ACSDP1Y2021.DP03&moe=false&tp=false)

```{r message=FALSE, warning=FALSE}

joined %>% 
  filter(CanWorkFromHome == "Some WFH") %>% 
  distinct(OCCSOC)


```

### Race

Good example of [graphing survey data](https://rpubs.com/Onduma/surveydata). Make a summary table that has the WEIGHTED Freq and Prop of the variables of interest before passing it to graphing commands. Using svytable to make the weighted table.

```{r race}


joined %>% crosstab_3way(x=YEAR, y=did_wfh, z=white, weight = PERWT)
joined %>% crosstab_3way(x=YEAR, y=did_wfh, z=RACE, weight = PERWT)

joined %>% crosstab_3way(x=YEAR, y=did_wfh, z=white, weight = PERWT) %>% 
  ggplot(aes(x=`1`, y=YEAR, fill = white)) + 
  geom_col(stat="identity", position = "fill")


crosstab(data, x=RACE, y=did_wfh, weight = PERWT, unwt_n=TRUE, n=FALSE)
crosstab(data, x=RACE, y=did_wfh, weight = PERWT, pct_type = "column", unwt_n=TRUE, n=FALSE)
crosstab(data, x=did_wfh, y=RACE, weight = PERWT, pct_type = "row", unwt_n=TRUE, n=FALSE)
crosstab(data, x=did_wfh, y=RACE, weight = PERWT)


data %>% filter(YEAR == 2021) %>%
  group_by(RACE) %>%
  summarize(Freq = n()) %>%
  mutate(Prop = Freq/sum(Freq))


svytable(~RACE, design=dstrata2021) %>% 
  as.data.frame() %>% # creates a frequency count by default?
  mutate(Prop =Freq/sum(Freq))


topline(dstrata2019, RACE, weight = PERWT)
topline(dstrata2021, RACE, weight = PERWT)

topline(data, RACE, weight = PERWT)

data %>% 
  mutate(white = if_else(RACE ==1, 1, 0),
         black = if_else(RACE ==2, 1, 0), 
         asian = if_else(RACE %in% c(4,5,6), 1, 0),
         otherrace = if_else(RACE %in% c(3,7,8,9),1,0)) %>%
  group_by(COUNTYFIP,PUMA) %>%
  mutate(pct_white = sum(white)/n(),
         pct_black = sum(black)/n())


svytotal(x = ~interaction(RACE, did_wfh_labels), design = dstrata2021, na.rm=TRUE)

# need to create race variables before the dstrata survey object.
#svytotal(x = ~interaction(white, did_wfh_labels), design = dstrata2021, na.rm=TRUE)

```

**OCC2010 variable labels:**

From DDI on IPUMS download: https://live.usa.datadownload.ipums.org/web/extracts/usa/1985137/usa_00006.xml#OCC

Management, Business, Science, and Arts = 10-430\
Business Operations Specialists = 500-730\
Financial Specialists = 800-950\
Computer and Mathematical = 1000-1240\
Architecture and Engineering = 1300-1540\
Technicians = 1550-1560\
Life, Physical, and Social Science = 1600-1980\
Community and Social Services = 2000-2060\
Legal = 2100-2150\
Education, Training, and Library = 2200-2550\
Arts, Design, Entertainment, Sports, and Media = 2600-2920\
Healthcare Practitioners and Technicians = 3000-3540\
Healthcare Support = 3600-3650\
Protective Service = 3700-3950\
Food Preparation and Serving = 4000-4150\
Building and Grounds Cleaning and Maintenance = 4200-4250\
Personal Care and Service = 4300-4650\
Sales and Related = 4700-4965\
Office and Administrative Support = 5000-5940\
Farming, Fishing, and Forestry = 6005-6130\
Construction = 6200-6765\
Extraction = 6800-6940\
Installation, Maintenance, and Repair = 7000-7630\
Production = 7700-8965\
Transportation and Material Moving = 9000-9750\
Military Specific = 9800-9830\
Unemployed (no occupation for 5+ years) or Never Worked = 9920\

#### Age

```{r eval = FALSE}
table(joined$AGE,joined$LABFORCE)

joined%>% filter(YEAR == 2021 & AGE>64 & INCEARN > 0) %>% summary()
# more then 75% of those under 18 make less than $5,000 a year.Not the kind of workers we are interested in anyways.  

# Even more extreme for less than 17

table(joined$age_cat, joined$did_wfh_labels)

```

### Internet Access

Other variables: CIHISPEED, CINETHH, MULTGEN, NCHILD, NCHLT5, MARST, FERTYR

-   CINETHH reports whether any member of the household accesses the Internet. Here, "access" refers to whether or not someone in the household uses or connects to the Internet, regardless of whether or not they pay for the service.

-   CIHISPEED reports whether the respondent or any member of their household subscribed to the Internet using broadband (high speed) Internet service such as cable, fiber optic, or DSL service.

```{r}
#10 is yes, 20 is no access. 00 is NA
table <- svytable(~CIHISPEED +did_wfh_labels+YEAR, design = dstrata) 
topline(dstrata, CIHISPEED, weight = PERWT)
table
# proportion of each respondant's sex and if they worked from home for each year in sample
table <- table %>% 
  as_tibble() %>% 
  group_by(YEAR, CIHISPEED)%>% 
  mutate(Prop =round(n/sum(n), digits=4))
table


table %>% ggplot(aes(factor(CIHISPEED, labels = c("Has high speed", "No high speed")), y=Prop, fill = did_wfh_labels, group = YEAR)) + 
  geom_col(stat = "identity", position = "stack") +
  facet_wrap(~YEAR)+
    geom_text(aes(label = scales::percent(Prop)), position = position_fill(vjust=.5), size=3) + 
  theme_classic() + theme(legend.position = "bottom", legend.title = element_blank())+
  labs(title ="Percent working from home & Access to high speed Internet: 2019 vs 2021",
       x = "", y = "",
      caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") + scale_y_continuous(labels = scales::percent)


table %>% ggplot(aes(factor(CIHISPEED, labels = c("Has high speed", "No high speed")), y=n, fill = did_wfh_labels, group = YEAR)) + 
  geom_col(stat = "identity", position = "stack") +
  facet_wrap(~YEAR)+
    geom_text(aes(label = scales::percent(Prop)), position = position_stack(vjust=.5), size=3) + 
  theme_classic() + theme(legend.position = "bottom", legend.title = element_blank())+
  labs(title ="Percent working from home & Access to high speed Internet: 2019 vs 2021",
       x = "", y = "",
      caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") 

### Access to any type of internet ####
table <- #dstrata %>% factor(CIHISPEED,)
  svytable(~CINETHH+did_wfh_labels+YEAR, design = dstrata) 
table
# proportion of each respondant's sex and if they worked from home for each year in sample
table <- table %>% 
  as_tibble() %>% 
  group_by(YEAR)%>% 
  mutate(Prop =round(n/sum(n), digits=3))
table


table %>% #filter(YEAR == 2021) %>%
  ggplot(aes(factor(CINETHH, labels = c("Has Own Access", "Has Other Access", "No Access")), y=n, fill = did_wfh_labels,
                     group = YEAR
                     )) + 
  geom_col(stat = "identity", position = "stack") +
 facet_wrap(~YEAR)+
    geom_text(aes(label = scales::percent(Prop)), position = position_stack(vjust=.5), size=3) + 
  theme_classic() + 
  theme(legend.position = "bottom", legend.title = element_blank())+
  labs(title ="Percent working from home & Access to Internet: 2019 vs 2021",
       x = "", y = "",
      caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") #+ scale_y_continuous(labels = scales::percent)

table %>% #filter(YEAR == 2021) %>%
  ggplot(aes(did_wfh_labels, y=n, fill = factor(CINETHH, labels = c("Has Own Access", "Has Other Access", "No Access")),
                     group = YEAR
                     )) + 
  geom_col(stat = "identity", position = "stack") +
 facet_wrap(~YEAR)+
    geom_text(aes(label = scales::percent(Prop)), position = position_stack(vjust=.5), size=3) + 
  theme_classic() + 
  theme(legend.position = "bottom", legend.title = element_blank())+
  labs(title ="Percent working from home & Access to Internet: 2019 vs 2021",
       x = "", y = "",
      caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") #+ scale_y_continuous(labels = scales::percent)



# table %>% ggplot(aes(factor(CINETHH, labels = c("Has Own Access", "Has Other Access", "No Access")), y=Prop, fill = did_wfh_labels, group = YEAR)) + 
#   geom_col(stat = "identity", position = "fill") +
#   facet_wrap(~YEAR)+
#     geom_text(aes(label = scales::percent(Prop)), position = position_fill(vjust=.5), size=3) + 
#   theme_classic() + theme(legend.position = "bottom", legend.title = element_blank())+
#   labs(title ="Percent working from home & Access to Internet: 2019 vs 2021",
#        x = "", y = "",
#       caption = "ACS 1 year samples for 2019 and 2021 used for weighted population estimates,") + scale_y_continuous(labels = scales::percent)


```

```{r}
table(joined$NCHILD)
table(joined$NCHLT5)


```

# Geographic Data

## State Level

## PUMA Level

PUMAs contain around 100,000 people.

For the counties that can be identified in the data (populations \> 100,000 & \< 200,000. 1-Year ACS have minimum of 65,000 population), the census summary tables are close but not identical to the tables calculated with the ACS sample data. "In this way more densely populated areas, like Chicago and Cook County will contain many PUMAs within their boundaries, while multiple sparsely populated entire counties, e.g., Jackson, Perry, Franklin, and Williamson, will comprise one PUMA." - [IPUMS v other Geographies](https://iecam.illinois.edu/browse/about-public-use-microdata-areas-pumas#:~:text=What%20is%20a%20PUMA%3F,Community%20Survey%201%2Dyear%20estimates)

```{r}
employ_bycounty<- joined %>% 
   group_by(as_factor(EMPSTAT), COUNTYFIP, YEAR) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount)) %>%
  arrange(YEAR)

employ_bycounty
 


joined <- joined %>%   
  mutate(county_pop_type = if_else(COUNTYFIP==0, "Rural Counties", "Urban Counties")) %>%
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))



joined %>% 
   group_by(county_pop_type, YEAR, did_wfh_labels) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))


```

19 is Champaign, 31 is Cook, 37 is DeKalb, 43 is DuPage, 89 is Kane, 111 is McHenry, etc.

Economic Characteristics summary table: [link](https://data.census.gov/table?t=Employment&g=040XX00US17,17$0500000&tid=ACSDP1Y2021.DP03&moe=false&tp=false)

```{r warning = FALSE, message=FALSE, results='hide'}

# PUMA shapefiles
pumasIL <- pumas("IL", cb=T, year=2019)
#county shapefiles
countyIL <- counties("IL", cb=T, year=2019)

#pumasdf <- fortify(pumasIL, region = 'PUMACE10')
```

```{r didWFH-byPUMA}
# first attempt to graph data. Does appear to match the 2nd attempt below.
# mapPUMAboth <- joined %>% 
#   filter(did_wfh_labels != "NA" )%>% # create percentages withing missing values included. aka valid percent.
#    group_by(county_pop_type, YEAR, PUMA, did_wfh_labels) %>% 
#    dplyr::summarize(weightedcount=sum(PERWT), #weighted 
#                     unweightedcount = n()) %>% 
#    mutate(pct_weight = weightedcount/sum(weightedcount), 
#           pct_noweight = unweightedcount/sum(unweightedcount))%>%
#   full_join(pumasIL, by = c("PUMA" = "PUMACE10")) 
# mapPUMAboth
# 
# mapPUMAboth %>%
#   filter(did_wfh_labels != "Did not WFH") %>%
#   ggplot(aes(fill = pct_weight)) +
#   geom_sf(aes(geometry = geometry), color = "black")+ 
#   labs(title = "Percent of PUMA area population that did work from home in 2021", 
#        subtitle = "Each PUMA has >100K & < 200K people", 
#        caption = "Facet_wrapped by year") + 
#   facet_wrap(~YEAR)


mapPUMAboth <- svytable(~YEAR+PUMA+did_wfh_labels, design = dstrata)
mapPUMAboth <- mapPUMAboth %>% as_tibble() %>%
   group_by(YEAR, PUMA) %>% 
     mutate(Prop = round(n/sum(n), digits =3)) %>%
     filter(did_wfh_labels == "Did WFH") %>%
     full_join(pumasIL, by = c("PUMA" = "PUMACE10"))
 
mapPUMAboth

mapPUMAboth %>%
  ggplot(aes(fill = Prop)) +
  geom_sf(aes(geometry = geometry), color = "black")+ labs(title = "Percent of PUMA area population that did work from home", subtitle = "2019 vs 2021", caption = "Using Survey weighted data object `dstrata`. Facet_wrapped by year") + 
  facet_wrap(~YEAR)

```

```{r separate-maps-didWFH, include=FALSE, eval=FALSE}

## Graph of both  together is better because it is automatically sharing a legend scale
####  filtering from joined dataframe for comparison: ######## 
  ## Prepping data for the graphs:
PUMAmapdata2019 <- joined %>% 
  as_data_frame() %>%
  filter(YEAR == 2019 & did_wfh_labels != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(PUMA, did_wfh_labels) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(pumasIL, by = c("PUMA" = "PUMACE10"))  


PUMAmapdata2021 <- joined %>% 
  filter(YEAR == 2021 & did_wfh_labels != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(PUMA, did_wfh_labels) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(pumasIL,by = c("PUMA" = "PUMACE10")) 



## Graphs
PUMAmapdata2021 %>%
  filter(did_wfh_labels != "Did not WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of PUMA population that did WFH in 2021",
       caption = "Note: All counties with populations < 50,000 people were 
       aggregated together in ACS data extracts (COUNTYFIP == 000)") 

PUMAmapdata2019 %>%
  filter(did_wfh_labels != "Did not WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of PUMA population that did WFH in 2019",
       subtitle = "Compare to facet_wrap graph",
       caption = "Note: All areas with populations < 65,000 people are
       aggregated together to create PUMA boundaries")
```

```{r internet-access}
### Access to Hi speed internet ###

# from joined dataframe. Not using survey objects or survey package
mapPUMAboth <- joined %>% 
   group_by(YEAR, PUMA, CINETHH) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(pumasIL, by = c("PUMA" = "PUMACE10")) 
mapPUMAboth

mapPUMAboth %>%
  filter(CINETHH ==3) %>% 
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population that did NOT have access to Internet", 
       subtitle = "Geography = PUMAs", 
       ) +   theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "OrRd", direction = 1)+
  facet_wrap(~YEAR)



## Access internet using survey objects
mapPUMAboth <- svytable(~YEAR+PUMA+CINETHH, design = dstrata)

mapPUMAboth <- mapPUMAboth %>% as_tibble() %>%
   group_by(YEAR, PUMA) %>% 
     mutate(Prop = round(n/sum(n), digits =3)) %>%
     full_join(pumasIL, by = c("PUMA" = "PUMACE10"))

mapPUMAboth %>%
  filter(CINETHH == 3 ) %>% 
  ggplot(aes(fill = Prop)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population that lacked access to Internet", 
     #  subtitle = "Each PUMA has >100K & < 200K people", 
       caption = "Geography = PUMAs.") + 
  facet_wrap(~YEAR) +
    theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "OrRd", direction = 1)
#mapPUMAboth <- mutate(pct_change = )

mapPUMAboth %>% pivot_wider(id_cols = -c(n), names_from ="YEAR", values_from = "Prop") %>%
  mutate(pct_change = `2021`-`2019`) %>%
  ggplot(aes(fill = pct_change)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
    theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "RdYlGn", direction = -1)+
  labs(title = "Change in population (from 2019 to 2021) 
       that had access to Internet", 
       subtitle = "not colorblind friendly...",
       caption = "All areas increased their access to internet.
       Change in Percentage points = 2021 % lacking access - 2019 % lacking access") 
```

```{r fast-internet-byPUMA}
### Access to Hi speed internet ###

# from joined dataframe. Not using survey objects or survey package
mapPUMAboth <- joined %>% 
   group_by(county_pop_type, YEAR, PUMA, CIHISPEED) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(pumasIL, by = c("PUMA" = "PUMACE10")) 
mapPUMAboth

mapPUMAboth %>%
  filter(CIHISPEED == 20 ) %>% 
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population without High Speed Internet", subtitle = "Geograph = PUMAs", caption = "Each PUMA has >100K & < 200K people.") + 
  facet_wrap(~YEAR)+
  scale_fill_distiller(palette = "OrRd", direction = 1)



## Access to Hi speed internet using survey objects
mapPUMAboth <- svytable(~YEAR+PUMA+CIHISPEED, design = dstrata)

mapPUMAboth <- mapPUMAboth %>% as_tibble() %>%
   group_by(YEAR, PUMA) %>% 
     mutate(Prop = round(n/sum(n), digits =3)) %>%
     full_join(pumasIL, by = c("PUMA" = "PUMACE10"))

mapPUMAboth %>%
  filter(CIHISPEED == 10 ) %>% 
  ggplot(aes(fill = Prop)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population WITH High Speed Internet", 
       subtitle = "Geograph = PUMAs", caption = "Each PUMA has >100K & < 200K people.") + 
  facet_wrap(~YEAR)+
  scale_fill_distiller(palette = "BlGn", direction = 1)

mapPUMAboth %>% pivot_wider(id_cols = -c(n), names_from ="YEAR", values_from = "Prop") %>%
  mutate(pct_change = `2021`-`2019`) %>%
  ggplot(aes(fill = pct_change)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Change in Access to High Speed Internet",
       subcaption = "2019 to 2021",
       caption = "Percentage point change = 2021 PUMA% with CIHISPEED=10 - 2019 PUMA% with CIHISPEED=10") +
  scale_fill_distiller(palette = "OrRd", direction = 1)

mapPUMAboth %>% pivot_wider(id_cols = -c(n), names_from ="YEAR", values_from = "Prop") %>%
  mutate(pct_change = `2021`-`2019`) %>%
  ggplot(aes(fill = pct_change)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
    theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "RdYlGn", direction = -1)+
  labs(title = "Change in population (from 2019 to 2021) 
       that had access to High Speed Internet", 
       subtitle = "not colorblind friendly...",
       caption = "Most areas improved their access to high speed internet. 
       Areas in orange or red experienced a decrease in access internet.")
  

```

## County Level

```{r}
### Access to Hi speed internet ###

# from joined dataframe. Not using survey objects or survey package
mapPUMAboth <- joined %>% 
   group_by(YEAR, countyFIP, CINETHH) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(countyIL, by = c("countyFIP" = "COUNTYFP")) 
mapPUMAboth

mapPUMAboth %>%
  filter(CINETHH ==3) %>% 
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population that did NOT have access to Internet", 
       subtitle = "Geography = County", 
       ) +   theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "OrRd", direction = 1)+
  facet_wrap(~YEAR)



## Access internet using survey objects
mapPUMAboth <- svytable(~YEAR+countyFIP+CINETHH, design = dstrata)

mapPUMAboth <- mapPUMAboth %>% as_tibble() %>%
   group_by(YEAR, countyFIP) %>% 
     mutate(Prop = round(n/sum(n), digits =3)) %>%
     full_join(countyIL, by = c("countyFIP" = "COUNTYFP"))

mapPUMAboth %>%
  filter(CINETHH == 3 ) %>% 
  ggplot(aes(fill = Prop)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population that lacked access to Internet", 
     #  subtitle = "Each PUMA has >100K & < 200K people", 
       caption = "Geography = Counties with populations > ~60K") + 
  facet_wrap(~YEAR) +
    theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "OrRd", direction = 1)
#mapPUMAboth <- mutate(pct_change = )

mapPUMAboth %>% pivot_wider(id_cols = -c(n), names_from ="YEAR", values_from = "Prop") %>%
  mutate(pct_change = `2021`-`2019`) %>%
  ggplot(aes(fill = pct_change)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
    theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "RdYlGn", direction = -1)+
  labs(title = "Change in population (from 2019 to 2021) 
       that had access to High Speed Internet", 
       subtitle = "not colorblind friendly...",
       caption = "Change in Percentage points = 2021 % lacking access - 2019 % lacking access") 



## Access to Hi speed internet using survey objects
mapPUMAboth <- svytable(~YEAR+countyFIP+CIHISPEED, design = dstrata)

mapPUMAboth <- mapPUMAboth %>% as_tibble() %>%
   group_by(YEAR, countyFIP) %>% 
     mutate(Prop = round(n/sum(n), digits =3)) %>%
     full_join(countyIL, by = c("countyFIP" = "COUNTYFP"))

mapPUMAboth %>%
  filter(CIHISPEED == 10 ) %>% 
  ggplot(aes(fill = Prop)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Percent of population WITH High Speed Internet", 
       subtitle = "Geograph = County"#, #caption = "Each PUMA has >100K & < 200K people."
       ) + 
  facet_wrap(~YEAR)+
  scale_fill_distiller(palette = "BlGn", direction = 1)

mapPUMAboth %>% pivot_wider(id_cols = -c(n), names_from ="YEAR", values_from = "Prop") %>%
  mutate(pct_change = `2021`-`2019`) %>%
  ggplot(aes(fill = pct_change)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
  labs(title = "Change in Access to High Speed Internet",
       subcaption = "2019 to 2021",
       caption = "Percentage point change = 2021 PUMA% with CIHISPEED=10 - 2019 PUMA% with CIHISPEED=10") +
  scale_fill_distiller(palette = "OrRd", direction = 1)

mapPUMAboth %>% pivot_wider(id_cols = -c(n), names_from ="YEAR", values_from = "Prop") %>%
  mutate(pct_change = `2021`-`2019`) %>%
  ggplot(aes(fill = pct_change)) +
  geom_sf(aes(geometry = geometry), color = "black")+ 
    theme(legend.title = element_blank())+
  scale_fill_distiller(palette = "RdYlGn", direction = -1)+
  labs(title = "Change in population (from 2019 to 2021) 
       that had access to High Speed Internet", 
       subtitle = "not colorblind friendly...",
       caption = "Most areas improved their access to high speed internet. 
       Areas in orange or red experienced a decrease in access internet.")
```

##### Did work from home

```{r wfh-bycounty}

mapdataboth <- joined %>% 
  filter(did_wfh_labels != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(county_pop_type, YEAR, countyFIP, did_wfh_labels) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(countyIL, by = c("countyFIP" = "COUNTYFP"))  %>%
    mutate(pct_weight = ifelse(is.na(county_pop_type), 0.04486351, pct_weight))%>%
 #  mutate(pct_weight = ifelse(is.na(county_pop_type), 0.09237573, pct_weight))# %>%
  mutate(did_wfh_labels = ifelse(is.na(did_wfh_labels),"Rural", did_wfh_labels))
mapdataboth

mapdataboth %>%
  filter(did_wfh_labels != "Did not WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ labs(title = "Percent of county population that did work from home in 2021", subtitle = "Countyfips != 000", caption = "Note: Shows all counties with populations large enough to have their own values.
                                                           Rural counties went from 4.5% WFH to 9.2% WFH") + facet_wrap(~YEAR)

mapdata2019 <- joined %>% 
  filter(YEAR == 2019 & did_wfh_labels != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(countyFIP, did_wfh_labels) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(countyIL, by = c("countyFIP" = "COUNTYFP"))  %>%
    mutate(pct_weight = ifelse( is.na(did_wfh_labels), 0.04486351, pct_weight),
           did_wfh_labels = ifelse(is.na(did_wfh_labels),"Rural", did_wfh_labels))


mapdata2021 <- joined %>% 
  filter(YEAR == 2021 & did_wfh_labels != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(countyFIP, did_wfh_labels) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(countyIL, by = c("countyFIP" = "COUNTYFP"))  %>%
    mutate(pct_weight = ifelse( is.na(did_wfh_labels), 0.09237573, pct_weight),
           did_wfh_labels = ifelse(is.na(did_wfh_labels),"Rural", did_wfh_labels))

mapdata2021 %>%
  filter(did_wfh_labels == "Did WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ labs(title = "Percent of county population that did work from home in 2021", subtitle = "Countyfips != 000", caption = "Note: Shows all counties with populations large enough to have their own values")

mapdata2021 %>%
  filter(did_wfh_labels != "Did not WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry))+ 
  labs(title = "Percent of population that did WFH in 2021",
       caption = "Note: All counties with populations < 50,000 people were 
       aggregated together in ACS data extracts (COUNTYFIP == 000)") 

mapdata2019 %>%
  filter(did_wfh_labels != "Did not WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry))+ 
  labs(title = "Percent of population that did WFH in 2019",
       caption = "Note: All counties with populations < 50,000 people were 
       aggregated together in ACS data extracts (COUNTYFIP == 000)") 
```

##### Could work from home

Based on Dingel & Niemen paper. A person's occupation indicates the likelihood of if they could work from home.

```{r couldWFH-bycounty}
# teleworkable is numeric
# CanWorkFromHome is categorical variable with 3 options. 


mapdataboth <- joined %>% 
  filter(CanWorkFromHome != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(county_pop_type, YEAR, countyFIP, CanWorkFromHome) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n()
                    #mean_telework = mean(teleworkable,na.rm=TRUE, weight = PERWT)
                    ) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(countyIL, by = c("countyFIP" = "COUNTYFP")) # %>%
    #mutate(pct_weight = ifelse(is.na(county_pop_type), 0.04486351, pct_weight))%>%
 #  mutate(pct_weight = ifelse(is.na(county_pop_type), 0.09237573, pct_weight))# %>%
 # mutate(did_wfh_labels = ifelse(is.na(did_wfh_labels),"Rural", did_wfh_labels))
mapdataboth

mapdataboth %>%
  filter(CanWorkFromHome == "Can WFH") %>%
  ggplot(aes(fill = pct_weight)) +
  geom_sf(aes(geometry = geometry), color = "black")+ labs(title = "Percent of county population that COULD work from home", subtitle = "Countyfips != 000", caption = "Note: Shows all counties with populations large enough to have their own values.
                                                           Rural counties went from ...
                                                           Counties had very small changes in occupations that COULD be done at work.") + facet_wrap(~YEAR)
```

```{r teleworkable-bycounty}
mapdataboth <- joined %>% 
 # filter(CanWorkFromHome != "NA" )%>% # create percentages withing missing values included. aka valid percent.
   group_by(county_pop_type, YEAR, countyFIP) %>% 
   dplyr::summarize(weightedcount=sum(PERWT), #weighted 
                    unweightedcount = n(),
                    mean_telework = mean(teleworkable, na.rm=TRUE, weight = PERWT)
                    ) %>% 
   mutate(pct_weight = weightedcount/sum(weightedcount), 
          pct_noweight = unweightedcount/sum(unweightedcount))%>%
  full_join(countyIL, by = c("countyFIP" = "COUNTYFP"))  %>%
    mutate(mean_telework = ifelse(is.na(county_pop_type), 0.2941470, mean_telework))
 #  mutate(pct_weight = ifelse(is.na(county_pop_type), 0.09237573, pct_weight))# %>%
 # mutate(did_wfh_labels = ifelse(is.na(did_wfh_labels),"Rural", did_wfh_labels))
mapdataboth

mapdataboth %>%
 # filter(CanWorkFromHome == "Can WFH") %>%
  ggplot(aes(fill = mean_telework)) +
  geom_sf(aes(geometry = geometry), color = "black")+ labs(title = "Percent of county population that COULD work from home", subtitle = "Countyfips != 000", caption = "Note: Shows all counties with populations large enough to have their own values.
                                                           Uses teleworkable, a continuous variable, instead of CanWorkFromHome.
                                                           Counties had very small changes in occupations that COULD be done at work.") + 
  facet_wrap(~YEAR)
```

### Mixed Geography

```{r warning = FALSE, message=FALSE}
# 
pums_weighted <- joined %>%
  filter(YEAR == 2021) %>%
  mutate(county_pop_type = if_else(COUNTYFIP==0, "Rural Counties", "Urban Counties")
        ) %>%
  dplyr::group_by(PUMA, COUNTYFIP, county_pop_type) %>%
  dplyr::summarize(weighted_obs = sum(PERWT),
            mean_telework = mean(teleworkable, weight=PERWT, na.rm=TRUE),
         #   mean_canwfh = mean(CanWorkFromHome), ## not numeric variable
            mean_didwfh = mean(did_wfh, weight = PERWT, na.rm=TRUE),
            observs = n(),
            avg_inc = mean(INCEARN,na.rm=TRUE)
           # avg_inc_w = survey_mean(INCEARN, weight=PERWT
         ) %>%  #number of people the sample represents
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))

pums_unweight <- joined %>% 
  filter(YEAR == 2021) %>%
    mutate(county_pop_type = if_else(COUNTYFIP==0, "Rural Counties", "Urban Counties")) %>%

  group_by(PUMA, COUNTYFIP, county_pop_type) %>% 
  summarize(unweight = n(),#unweighted number of observations
            mean_telework = mean(teleworkable,na.rm=TRUE ),
            mean_didwfh = mean(did_wfh, na.rm=TRUE),
            avg_inc = mean(INCEARN,na.rm=TRUE)) %>% 
  mutate(PUMA = str_pad(PUMA, 5, pad="0"),
         countyFIP = str_pad(COUNTYFIP, 3, pad = "0"))

plotweighted <- pumasIL %>% 
  left_join(pums_weighted, by = c("PUMACE10" = "PUMA"))

plotunweight <- pumasIL %>% 
  left_join(pums_unweight, by = c("PUMACE10" = "PUMA"))

## PUMA boundaries
plot(plotweighted["weighted_obs"])
plot(plotunweight["unweight"])


plot(plotweighted["avg_inc"])
#plot(plotweighted["avg_inc_w"])
plot(plotunweight["avg_inc"])
#plot(plotweighted["avg_inc_w"])

plot(plotweighted["mean_didwfh"])
plot(plotunweight["mean_didwfh"])



FIPweighted <- countyIL %>% left_join(pums_weighted, by = c("COUNTYFP" = "countyFIP"))
FIPunweight <- countyIL %>% left_join(pums_unweight, by = c("COUNTYFP" = "countyFIP"))
plot(FIPweighted["weighted_obs"])
plot(FIPunweight["unweight"])


plot(countyIL["COUNTYFP"])


```

Observations using `CITY` variable: identifies observations from Chicago.

88 distinct PUMA areas.

```{r}
#joined %>% group_by(CITY) %>% distinct(CITY)
joined %>% group_by(PUMA) %>% summarize(observs = n())
joined %>% filter(INCEARN > 0) %>% group_by(PUMA) %>% summarize(observs = n())

joined %>% group_by(COUNTYFIP, PUMA) %>% summarize(observs = n())

joined %>% 
  group_by(COUNTYFIP, PUMA) %>% 
  summarize(observs = n(),
            avg_inc = mean(INCEARN),
            avg_inc_w= mean(INCEARN, weight = PERWT))
```

#### Geography Variable Notes

**PUMAS vs COMMZONE vs COUNTIES**

[Link from Francis on COMZONE variable](https://eig.org/the-uneven-geography-of-remote-work/) (Commuter Zones)

[Interactive ESRI Map of all PUMA outlines](https://univofillinois.maps.arcgis.com/apps/mapviewer/index.html?layers=71eb4ef236ca42c4b577a0a105e790e2)

[Article on calculating mean income for groups of geographies with ACS data](https://atcoordinates.info/2019/05/13/calculating-mean-income-for-groups-of-geographies-with-census-acs-data/)

```{r stateworkedin, eval=FALSE}
# State worked in:
#0=NA, 17=Illinois



# ipums_var_desc(data, PWSTATE2)

joined <- joined %>% 
  mutate(PWSTATE2_clean = as_factor(lbl_na_if(PWSTATE2, ~.val %in% c(0))))

joined %>% 
 dplyr::group_by(YEAR) %>%
  dplyr::summarize(workers=sum(PERWT)) %>% #number of people that match that observation
  dplyr::ungroup()%>%
 dplyr:: group_by(YEAR,PWSTATE2_clean)%>%
  mutate(pct = n()/workers)%>% 
  arrange(desc(pct))
```

### Other Sources and Papers

Ability to work from home: evidence from two surveys and implications for the labor market in the COVID-19 pandemic. June 2020. [BLS Monthly Labor Review](https://www.bls.gov/opub/mlr/2020/article/ability-to-work-from-home.htm)

-   Authors used Current Population Survey data and O\*NET job-content data to categorize jobs as able or unable to telework. Followed Dingel & Neiman's methodology of classifying telework feasibility and merging with data from American Time Use Survey (ATUS)

-   Compares ability to work from home with actual occurance of working from home based on American Time Use Survey and Occupational Information Network (O\*NET). Also uses Current Population Survey data to look at how effects differed between occupations where telework was feasible or not.
